version: '3.8'

services:
  # tRPC Backend Server
  backend:
    build:
      context: .
      dockerfile: apps/server/Dockerfile
    container_name: dpp-backend
    ports:
      - "3101:4001"
    environment:
      - NODE_ENV=production
      - PORT=4001
      - DATABASE_URL=postgresql://dpp_user:dpp_password@postgres:5432/digital_persona
      - JWT_SECRET=prod-secret-key-change-in-production
      - CORS_ORIGIN=http://localhost:3100
    volumes:
      - backend_data:/app/data
    networks:
      - dpp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: dpp-frontend
    ports:
      - "3100:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - NEXT_PUBLIC_API_URL=http://localhost:3101
      - NEXT_PUBLIC_APP_ENV=production
      - BETTER_AUTH_SECRET=prod-auth-secret-change-in-production
      - BETTER_AUTH_URL=http://localhost:3100
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dpp-network
    restart: unless-stopped

  # Optional: Redis for caching (future use)
  # redis:
  #   image: redis:7-alpine
  #   container_name: dpp-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - dpp-network
  #   restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dpp-postgres
    environment:
      POSTGRES_DB: digital_persona
      POSTGRES_USER: dpp_user
      POSTGRES_PASSWORD: dpp_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - dpp-network
    restart: unless-stopped

volumes:
  backend_data:
  # redis_data:
  postgres_data:

networks:
  dpp-network:
    driver: bridge
