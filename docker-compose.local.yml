version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dpp-local-postgres
    environment:
      POSTGRES_DB: digital_persona
      POSTGRES_USER: dpp_admin
      POSTGRES_PASSWORD: local_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - dpp-local
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U dpp_admin -d digital_persona" ]
      interval: 10s
      timeout: 5s
      retries: 5



  # Backend API Server
  backend:
    build:
      context: ./apps/server
      dockerfile: Dockerfile
    container_name: dpp-local-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://dpp_admin:local_dev_password@postgres:5432/digital_persona
      JWT_SECRET: local-development-jwt-secret-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://frontend:3000
      # AWS S3 Configuration (using real AWS S3)
      # Set your AWS credentials in .env file
      AWS_REGION: us-west-1
      S3_BUCKET: local-mars-dpp-uploads
      # AWS credentials should be loaded from .env file:
      # AWS_ACCESS_KEY_ID: your-aws-access-key-id
      # AWS_SECRET_ACCESS_KEY: your-aws-secret-access-key
    ports:
      - "3001:3001"
    volumes:
      - ./apps/server/src:/app/src:ro
      - ./packages:/app/packages:ro
    networks:
      - dpp-local
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Frontend Web App
  frontend:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.simple
    container_name: dpp-local-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WEBSITE_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/web/src:/app/src:ro
      - ./packages:/app/packages:ro
    networks:
      - dpp-local
    depends_on:
      - backend
    restart: unless-stopped

  # Redis (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: dpp-local-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dpp-local
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: dpp-local-postgres-data

  redis_data:
    name: dpp-local-redis-data

networks:
  dpp-local:
    name: dpp-local-network
    driver: bridge
