name: Deploy Serverless Architecture

on:
  push:
    branches:
      - main
      - "dev[0-9][0-9]"
      - "qa[0-9][0-9]"
      - "staging[0-9][0-9]"
      - "hotfix[0-9][0-9]"
  pull_request:
    branches:
      - main
      - "dev[0-9][0-9]"
      - "qa[0-9][0-9]"
      - "staging[0-9][0-9]"
      - "hotfix[0-9][0-9]"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip test execution for emergency deployments"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  security-events: write
  actions: read
  contents: read

env:
  AWS_REGION: us-west-1
  NODE_VERSION: 20
  # Remove hardcoded DOMAIN - will be determined dynamically

# Prevent multiple runs from conflicting
concurrency:
  group: serverless-deployment-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  # ===========================================
  # Environment Detection & Setup
  # ===========================================
  detect-environment:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      main_env: ${{ steps.env.outputs.main_env }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
      is_numbered_env: ${{ steps.env.outputs.is_numbered_env }}
      function_name: ${{ steps.env.outputs.function_name }}
      s3_bucket: ${{ steps.env.outputs.s3_bucket }}
      api_url: ${{ steps.env.outputs.api_url }}
      domain_name: ${{ steps.env.outputs.domain_name }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Determine Environment and Resources
        id: env
        run: |
          # Determine environment based on branch
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="prod"
            MAIN_ENV="prod"
            SHOULD_DEPLOY="false"  # Main branch requires manual deployment
            IS_NUMBERED_ENV="false"
          elif [[ "${{ github.ref_name }}" =~ ^dev[0-9][0-9]$ ]]; then
            ENVIRONMENT="${{ github.ref_name }}"
            MAIN_ENV="dev"
            SHOULD_DEPLOY="true"
            IS_NUMBERED_ENV="true"
          elif [[ "${{ github.ref_name }}" =~ ^qa[0-9][0-9]$ ]]; then
            ENVIRONMENT="${{ github.ref_name }}"
            MAIN_ENV="qa"
            SHOULD_DEPLOY="true"
            IS_NUMBERED_ENV="true"
          elif [[ "${{ github.ref_name }}" =~ ^staging[0-9][0-9]$ ]]; then
            ENVIRONMENT="${{ github.ref_name }}"
            MAIN_ENV="staging"
            SHOULD_DEPLOY="true"
            IS_NUMBERED_ENV="true"
          elif [[ "${{ github.ref_name }}" =~ ^hotfix[0-9][0-9]$ ]]; then
            ENVIRONMENT="${{ github.ref_name }}"
            MAIN_ENV="hotfix"
            SHOULD_DEPLOY="true"
            IS_NUMBERED_ENV="true"
          else
            echo "❌ Invalid branch name: ${{ github.ref_name }}"
            echo "Valid branches: main, dev01-dev99, qa01-qa99, staging01-staging99, hotfix01-hotfix99"
            exit 1
          fi

          # Generate dynamic resource names
          FUNCTION_NAME="$MAIN_ENV-$ENVIRONMENT-dpp-api"
          S3_BUCKET="$MAIN_ENV-$ENVIRONMENT-dpp-website"

          # Generate URLs based on environment
          if [[ "$ENVIRONMENT" == "prod" ]]; then
            # Production URLs for main branch
            DOMAIN_NAME="www.hibiji.com"
            API_URL="https://api.hibiji.com/v1"
          else
            # Standard pattern for numbered environments
            DOMAIN_NAME="${ENVIRONMENT}.hibiji.com"
            API_URL="https://${ENVIRONMENT}-api.hibiji.com/v1"
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "main_env=$MAIN_ENV" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT
          echo "is_numbered_env=$IS_NUMBERED_ENV" >> $GITHUB_OUTPUT
          echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT
          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "domain_name=$DOMAIN_NAME" >> $GITHUB_OUTPUT

          echo "🎯 Environment: $ENVIRONMENT"
          echo "🏗️ Main Environment: $MAIN_ENV"
          echo "🚀 Should Deploy: $SHOULD_DEPLOY"
          echo "🔢 Is Numbered Environment: $IS_NUMBERED_ENV"
          echo "⚡ Function Name: $FUNCTION_NAME"
          echo "🪣 S3 Bucket: $S3_BUCKET"
          echo "🌐 API URL: $API_URL"
          echo "🏡 Domain Name: $DOMAIN_NAME"

  # ===========================================
  # Dependency Scanning (Security)
  # ===========================================
  dependency-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true
    if: github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # ===========================================
  # Build Phase
  # ===========================================
  build-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-environment]
    outputs:
      backend-hash: ${{ steps.hash.outputs.backend-hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build workspace packages
        run: |
          echo "🔧 Building workspace packages..."
          npm run build --workspace=@digital-persona/database
          npm run build --workspace=@digital-persona/shared

      - name: Build backend for Lambda
        working-directory: apps/server
        run: |
          echo "📦 Building backend for Lambda deployment..."
          npm run build:lambda

      - name: Generate build hash
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ needs.detect-environment.outputs.environment }}" | sha256sum | cut -d' ' -f1 | head -c 8)
          echo "backend-hash=$HASH" >> $GITHUB_OUTPUT
          echo "📋 Build hash: $HASH"

      - name: Verify Lambda build output
        run: |
          echo "🔍 Verifying Lambda build artifacts..."

          if [ ! -f "apps/server/lambda-dist/index.js" ]; then
            echo "❌ Lambda index.js not found"
            echo "📁 Lambda-dist contents:"
            ls -la apps/server/lambda-dist/ || echo "lambda-dist directory not found"
            exit 1
          fi

          if [ ! -f "apps/server/lambda-dist/package.json" ]; then
            echo "❌ Lambda package.json not found"
            exit 1
          fi

          INDEX_SIZE=$(stat -c%s "apps/server/lambda-dist/index.js" 2>/dev/null || stat -f%z "apps/server/lambda-dist/index.js")
          echo "✅ Lambda artifacts verified:"
          echo "   📄 index.js: ${INDEX_SIZE} bytes"
          echo "   📄 package.json: $(stat -c%s "apps/server/lambda-dist/package.json" 2>/dev/null || stat -f%z "apps/server/lambda-dist/package.json") bytes"

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ needs.detect-environment.outputs.environment }}-${{ steps.hash.outputs.backend-hash }}
          path: |
            apps/server/lambda-dist/index.js
            apps/server/lambda-dist/package.json

  build-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [detect-environment]
    outputs:
      frontend-hash: ${{ steps.hash.outputs.frontend-hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Build workspace packages
        run: |
          echo "🔧 Building workspace packages..."
          npm run build --workspace=@digital-persona/database
          npm run build --workspace=@digital-persona/shared

      - name: Build frontend for static hosting
        working-directory: apps/web
        env:
          NEXT_PUBLIC_API_URL: ${{ needs.detect-environment.outputs.api_url }}
          NEXT_BUILD_EXPORT: "true"
        run: |
          echo "📦 Building frontend for static hosting..."
          echo "🌐 API URL: $NEXT_PUBLIC_API_URL"
          echo "📦 Export mode: Static export for S3"
          npm run build

      - name: Generate build hash
        id: hash
        run: |
          HASH=$(echo "${{ github.sha }}-${{ needs.detect-environment.outputs.environment }}" | sha256sum | cut -d' ' -f1 | head -c 8)
          echo "frontend-hash=$HASH" >> $GITHUB_OUTPUT
          echo "📋 Build hash: $HASH"

      - name: Verify Frontend build output
        run: |
          echo "🔍 Verifying Frontend build artifacts..."

          if [ ! -d "apps/web/out" ]; then
            echo "❌ Frontend build output directory not found"
            echo "📁 Web directory contents:"
            ls -la apps/web/ || echo "web directory not found"
            exit 1
          fi

          if [ ! -f "apps/web/out/index.html" ]; then
            echo "❌ Frontend index.html not found"
            echo "📁 Build output contents:"
            ls -la apps/web/out/ || echo "out directory empty"
            exit 1
          fi

          FILE_COUNT=$(find apps/web/out -type f | wc -l)
          TOTAL_SIZE=$(du -sh apps/web/out | cut -f1)
          echo "✅ Frontend artifacts verified:"
          echo "   📁 Output directory: apps/web/out/"
          echo "   📄 Files: ${FILE_COUNT}"
          echo "   💾 Total size: ${TOTAL_SIZE}"

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-${{ needs.detect-environment.outputs.environment }}-${{ steps.hash.outputs.frontend-hash }}
          path: apps/web/out/

  # ===========================================
  # Infrastructure Deployment
  # ===========================================
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [detect-environment, dependency-scan]
    if: ${{ needs.detect-environment.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch' }}
    timeout-minutes: 45
    environment: ${{ needs.detect-environment.outputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Update IAM Permissions (if needed)
        run: |
          echo "🔐 Checking and updating IAM permissions for new AWS services..."
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          # Run the IAM update script
          ./scripts/update-iam-permissions.sh

      - name: Terraform Init and Plan
        working-directory: terraform/environments/${{ needs.detect-environment.outputs.main_env }}
        env:
          ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
          MAIN_ENV: ${{ needs.detect-environment.outputs.main_env }}
          PROJECT_NAME: "dpp"
        run: |
          echo "🚀 Step 1: Terraform Initialization with isolated backend..."
          # Use dynamic backend key for proper sub-environment isolation
          terraform init -backend-config="key=$MAIN_ENV/$ENVIRONMENT/terraform.tfstate" -reconfigure

          echo "🎯 Step 2: Variables Configuration..."
          echo "Environment: $ENVIRONMENT"
          echo "Main Environment: $MAIN_ENV"

          # Create tfvars file
          cat > environment.auto.tfvars << EOF
          environment = "$MAIN_ENV"
          sub_environment = "$ENVIRONMENT"
          project_name = "$PROJECT_NAME"
          domain_name = "hibiji.com"
          aws_region = "${{ env.AWS_REGION }}"
          alert_emails = ["alerts@maras.co"]
          EOF

          echo "📋 Step 3: Terraform Planning..."
          terraform plan -var-file="environment.auto.tfvars" -out=tfplan

      - name: Handle Existing Resources
        working-directory: terraform/environments/${{ needs.detect-environment.outputs.main_env }}
        env:
          ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
          MAIN_ENV: ${{ needs.detect-environment.outputs.main_env }}
          PROJECT_NAME: "dpp"
        run: |
          echo "📥 Step 3: Handling existing AWS resources..."

          # Check and import existing RDS DB Subnet Group if it exists
          SUBNET_GROUP_NAME="${MAIN_ENV}-${ENVIRONMENT}-${PROJECT_NAME}-db-subnet-group"
          echo "🔍 Checking for existing DB Subnet Group: $SUBNET_GROUP_NAME"

          if aws rds describe-db-subnet-groups --db-subnet-group-name "$SUBNET_GROUP_NAME" --output text >/dev/null 2>&1; then
            echo "📦 DB Subnet Group exists: $SUBNET_GROUP_NAME"
            
            # Check if already in Terraform state
            if terraform state list | grep -q "aws_db_subnet_group.database"; then
              echo "✅ DB Subnet Group already managed by Terraform, skipping import"
            else
              echo "📥 Importing DB Subnet Group to Terraform state..."
              terraform import aws_db_subnet_group.database "$SUBNET_GROUP_NAME" || echo "⚠️ Import failed"
            fi
          else
            echo "✅ DB Subnet Group does not exist, will be created"
          fi

          # Check and import existing CloudFront Origin Access Control
          OAC_NAME="${MAIN_ENV}-${ENVIRONMENT}-${PROJECT_NAME}-oac"
          echo "🔍 Checking for existing Origin Access Control: $OAC_NAME"

          # Get OAC ID if it exists
          OAC_ID=$(aws cloudfront list-origin-access-controls --query "OriginAccessControlList.Items[?Name=='$OAC_NAME'].Id" --output text 2>/dev/null || echo "")

          if [ -n "$OAC_ID" ] && [ "$OAC_ID" != "None" ]; then
            echo "📦 Origin Access Control exists with ID: $OAC_ID"
            
            # Check if already in Terraform state
            if terraform state list | grep -q "module.s3_website.aws_cloudfront_origin_access_control.website"; then
              echo "✅ Origin Access Control already managed by Terraform, skipping import"
            else
              echo "📥 Importing Origin Access Control to Terraform state..."
              terraform import module.s3_website.aws_cloudfront_origin_access_control.website "$OAC_ID" || echo "⚠️ Import failed"
            fi
          else
            echo "✅ Origin Access Control does not exist, will be created"
          fi

          # Check for other common conflicting resources
          echo "🔍 Checking for other potential resource conflicts..."

          # Check S3 buckets
          WEBSITE_BUCKET="${MAIN_ENV}-${ENVIRONMENT}-${PROJECT_NAME}-website"
          if aws s3api head-bucket --bucket "$WEBSITE_BUCKET" >/dev/null 2>&1; then
            echo "📦 S3 bucket $WEBSITE_BUCKET exists"
            
            # Check if already in Terraform state
            if terraform state list | grep -q "module.s3_website.aws_s3_bucket.website"; then
              echo "✅ S3 bucket already managed by Terraform, skipping import"
            else
              echo "📥 Importing S3 bucket to Terraform state..."
              terraform import module.s3_website.aws_s3_bucket.website "$WEBSITE_BUCKET" || echo "⚠️ Import failed"
            fi
          fi

          echo "✅ Resource conflict handling completed"

      - name: Verify and Create ACM Certificates
        working-directory: terraform/environments/${{ needs.detect-environment.outputs.main_env }}
        env:
          ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
          MAIN_ENV: ${{ needs.detect-environment.outputs.main_env }}
          PROJECT_NAME: "dpp"
        run: |
          echo "🔐 Step 4: Verifying ACM certificates for custom domains..."

          # Define domain names for this environment
          if [ "$ENVIRONMENT" = "prod" ]; then
            WEBSITE_DOMAIN="www.hibiji.com"
            API_DOMAIN="api.hibiji.com"
          else
            WEBSITE_DOMAIN="${ENVIRONMENT}.hibiji.com"
            API_DOMAIN="${ENVIRONMENT}-api.hibiji.com"
          fi

          echo "🌐 Target domains:"
          echo "   📄 Website: $WEBSITE_DOMAIN"
          echo "   🔗 API: $API_DOMAIN"

          # Function to check if certificate exists for domain
          check_certificate() {
            local domain=$1
            local cert_arn=$(aws acm list-certificates --region us-east-1 \
              --query "CertificateSummaryList[?DomainName=='$domain' && Status=='ISSUED'].CertificateArn" \
              --output text 2>/dev/null || echo "")
            
            if [ -n "$cert_arn" ] && [ "$cert_arn" != "None" ]; then
              echo "✅ Certificate exists for $domain: $cert_arn"
              return 0
            else
              echo "❌ No valid certificate found for $domain"
              return 1
            fi
          }

          # Check website certificate
          echo "🔍 Checking website certificate..."
          if ! check_certificate "$WEBSITE_DOMAIN"; then
            echo "⚠️ Website certificate missing for $WEBSITE_DOMAIN"
            echo "ℹ️ Note: For production deployment, create wildcard certificate *.hibiji.com"
            echo "ℹ️ Current setup uses CloudFront default SSL (functional but not professional)"
          fi

          # Check API certificate  
          echo "🔍 Checking API certificate..."
          if ! check_certificate "$API_DOMAIN"; then
            echo "⚠️ API certificate missing for $API_DOMAIN"
            echo "ℹ️ Note: For production deployment, create wildcard certificate *-api.hibiji.com"
            echo "ℹ️ Current setup uses API Gateway default SSL (functional but not professional)"
          fi

          # Check for wildcard certificates (production recommendation)
          echo "🔍 Checking for production-ready wildcard certificates..."

          WILDCARD_WEB=$(aws acm list-certificates --region us-east-1 \
            --query "CertificateSummaryList[?DomainName=='*.hibiji.com' && Status=='ISSUED'].CertificateArn" \
            --output text 2>/dev/null || echo "")
            
          WILDCARD_API=$(aws acm list-certificates --region us-east-1 \
            --query "CertificateSummaryList[?DomainName=='*-api.hibiji.com' && Status=='ISSUED'].CertificateArn" \
            --output text 2>/dev/null || echo "")

          if [ -n "$WILDCARD_WEB" ] && [ "$WILDCARD_WEB" != "None" ]; then
            echo "🌟 Production-ready wildcard certificate found: *.hibiji.com"
          else
            echo "💡 Recommendation: Create wildcard certificate *.hibiji.com for production"
          fi

          if [ -n "$WILDCARD_API" ] && [ "$WILDCARD_API" != "None" ]; then
            echo "🌟 Production-ready wildcard certificate found: *-api.hibiji.com"  
          else
            echo "💡 Recommendation: Create wildcard certificate *-api.hibiji.com for production"
          fi

          echo ""
          echo "📋 Certificate Status Summary:"
          echo "   🏢 Environment: $ENVIRONMENT"
          echo "   🌐 Using AWS default SSL certificates (functional)"
          echo "   💡 For production: Implement wildcard certificates as documented in README.md"
          echo "   📚 See 'Production Readiness TODOs' section for implementation details"
          echo ""
          echo "✅ Certificate verification completed"

      - name: Apply Terraform Configuration
        working-directory: terraform/environments/${{ needs.detect-environment.outputs.main_env }}
        env:
          ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}
          MAIN_ENV: ${{ needs.detect-environment.outputs.main_env }}
          PROJECT_NAME: "dpp"
        run: |
          echo "🏗️ Step 4: Applying Terraform configuration..."

          # Debug: Show current backend configuration
          echo "🔍 DEBUG: Checking terraform backend state..."
          echo "Expected backend key: $MAIN_ENV/$ENVIRONMENT/terraform.tfstate"

          # Clean any existing terraform state to ensure fresh initialization
          echo "🧹 Cleaning any cached terraform state..."
          rm -rf .terraform .terraform.lock.hcl terraform.tfstate*

          # Re-initialize with explicit backend configuration
          echo "🔄 Re-initializing terraform with isolated backend..."
          terraform init -backend-config="key=$MAIN_ENV/$ENVIRONMENT/terraform.tfstate" -reconfigure

                    # Run terraform plan and parse output to detect changes
          echo "📊 Running terraform plan to detect changes..."
          terraform plan -var-file="environment.auto.tfvars" -out=tfplan > plan_output.txt 2>&1
          PLAN_EXIT_CODE=$?

          # Show plan output
          cat plan_output.txt

          # Parse plan output to detect changes (terraform exit code is buggy)
          CHANGES_DETECTED="false"
          if grep -q "Plan: [1-9]" plan_output.txt || grep -q "to add" plan_output.txt; then
            CHANGES_DETECTED="true"
          fi

          echo "📋 Terraform plan exit code: $PLAN_EXIT_CODE"
          echo "📋 Changes detected: $CHANGES_DETECTED"
          echo "📋 Logic: Parsing plan output for 'Plan: [1-9]' or 'to add'"

          if [ "$CHANGES_DETECTED" = "true" ]; then
            echo "🚀 Changes detected! Applying Terraform configuration..."
            echo "📊 Resources will be created/modified"

            # Robust apply with retry mechanism (no targeted fallback)
            APPLY_SUCCESS="false"
            for attempt in 1 2 3; do
              echo "🎯 Attempt $attempt/3: Full Terraform apply..."
              
              if terraform apply -auto-approve -lock-timeout=600s tfplan; then
                echo "✅ Full Terraform apply completed successfully!"
                APPLY_SUCCESS="true"
                break
              else
                APPLY_EXIT_CODE=$?
                echo "❌ Attempt $attempt failed with exit code: $APPLY_EXIT_CODE"
                
                if [ $attempt -lt 3 ]; then
                  echo "⏳ Waiting 30 seconds before retry..."
                  sleep 30
                  
                  # Refresh the plan for the retry
                  echo "🔄 Refreshing Terraform plan for retry..."
                  terraform plan -var-file="environment.auto.tfvars" -out=tfplan
                else
                  echo "💥 All apply attempts failed!"
                  echo "🔍 Common solutions:"
                  echo "   • Check AWS resource limits and quotas"
                  echo "   • Verify IAM permissions are sufficient"
                  echo "   • Check for resource naming conflicts"
                  echo "   • Review Terraform state for inconsistencies"
                  exit 1
                fi
              fi
            done
            
            if [ "$APPLY_SUCCESS" = "false" ]; then
              echo "❌ Terraform apply failed after 3 attempts"
              exit 1
            fi
          else
            echo "✅ No infrastructure changes needed (plan exit code: $PLAN_EXIT_CODE)"
          fi

      - name: Verify Infrastructure
        working-directory: terraform/environments/${{ needs.detect-environment.outputs.main_env }}
        run: |
          echo "🔍 Step 5: Verifying infrastructure deployment..."

          # Get outputs
          terraform output -json > outputs.json

          echo "📋 Terraform Outputs:"
          cat outputs.json | jq .

          # Verify key resources exist
          echo "🔍 Verifying key resources..."

          # Check Lambda function
          FUNCTION_NAME=$(terraform output -raw lambda_function_name 2>/dev/null || echo "")
          if [ ! -z "$FUNCTION_NAME" ]; then
            echo "✅ Lambda function: $FUNCTION_NAME"
          fi

          # Check S3 website bucket
          WEBSITE_BUCKET=$(terraform output -raw website_bucket_name 2>/dev/null || echo "")
          if [ ! -z "$WEBSITE_BUCKET" ]; then
            echo "✅ Website S3 bucket: $WEBSITE_BUCKET"
          fi

          # Check API Gateway URL
          API_URL=$(terraform output -raw api_url 2>/dev/null || echo "")
          if [ ! -z "$API_URL" ]; then
            echo "✅ API Gateway URL: $API_URL"
          fi

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-${{ needs.detect-environment.outputs.environment }}
          path: terraform/environments/${{ needs.detect-environment.outputs.main_env }}/outputs.json

  # ===========================================
  # Application Deployment
  # ===========================================
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [detect-environment, deploy-infrastructure, build-backend]
    if: ${{ needs.detect-environment.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-${{ needs.detect-environment.outputs.environment }}-${{ needs.build-backend.outputs.backend-hash }}

      - name: Locate and prepare Lambda files
        run: |
          echo "📦 Locating Lambda bundle files after artifact download..."
          echo "📁 Current directory contents:"
          ls -la

          # Find index.js location and move to current directory if needed
          INDEX_JS_PATH=$(find . -name "index.js" -type f | head -1)
          PACKAGE_JSON_PATH=$(find . -name "package.json" -path "*/lambda-dist/*" -type f | head -1)

          if [ -z "$INDEX_JS_PATH" ]; then
            echo "❌ index.js not found anywhere"
            echo "📁 Available files:"
            find . -name "*.js" -o -name "*.json" | head -10
            exit 1
          fi

          echo "📍 Found index.js at: $INDEX_JS_PATH"

          # Move files to current directory if they're in subdirectories
          if [ "$INDEX_JS_PATH" != "./index.js" ]; then
            echo "📦 Moving Lambda files to current directory..."
            cp "$INDEX_JS_PATH" ./index.js
            
            if [ -n "$PACKAGE_JSON_PATH" ]; then
              echo "📍 Found package.json at: $PACKAGE_JSON_PATH"
              cp "$PACKAGE_JSON_PATH" ./package.json
            fi
          fi

          echo "✅ Lambda files prepared:"
          ls -la index.js package.json

      - name: Create Lambda deployment package
        run: |
          echo "📦 Creating Lambda deployment package from bundled output..."

          # Create deployment zip from current directory (which contains the bundled output)
          echo "📦 Creating deployment zip from bundled files..."
          zip -r lambda-deployment.zip . -x "*.DS_Store*" "*.git*"

          echo "✅ Lambda deployment package created successfully"
          echo "📊 Package contents:"
          unzip -l lambda-deployment.zip

      - name: Deploy Lambda function
        run: |
          # Use dynamic function name from environment detection
          FUNCTION_NAME="${{ needs.detect-environment.outputs.function_name }}"

          echo "🔄 Updating Lambda function: $FUNCTION_NAME"

          # Wait for Lambda to be ready
          check_lambda_ready() {
            local status=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.State' --output text 2>/dev/null)
            echo "Lambda status: $status"
            [[ "$status" == "Active" ]]
          }

          # Wait for Lambda to be ready before updating
          echo "⏳ Waiting for Lambda to be ready..."
          for i in {1..30}; do
            if check_lambda_ready; then
              echo "✅ Lambda is ready for update"
              break
            fi
            echo "⏳ Waiting... (attempt $i/30)"
            sleep 10
          done

          # Update Lambda with retry logic
          update_lambda() {
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Attempting Lambda update (attempt $attempt/$max_attempts)..."
              
              if aws lambda update-function-code --function-name $FUNCTION_NAME --zip-file fileb://lambda-deployment.zip; then
                echo "✅ Lambda update successful"
                return 0
              else
                echo "❌ Lambda update failed (attempt $attempt/$max_attempts)"
                
                if [ $attempt -lt $max_attempts ]; then
                  echo "⏳ Waiting before retry..."
                  sleep $((attempt * 10))
                fi
                
                attempt=$((attempt + 1))
              fi
            done
            
            echo "❌ All Lambda update attempts failed"
            return 1
          }

          update_lambda

      - name: Verify Lambda permissions after deployment
        run: |
          FUNCTION_NAME="${{ needs.detect-environment.outputs.function_name }}"

          echo "🔍 Verifying Lambda function configuration..."

          # Get function configuration
          aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.{Runtime:Runtime,Timeout:Timeout,MemorySize:MemorySize,State:State}' --output table

          # Test Lambda function with proper API Gateway event format
          echo "🧪 Testing Lambda function..."
          echo '{
            "httpMethod": "GET",
            "path": "/health",
            "pathParameters": null,
            "queryStringParameters": null,
            "headers": {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "User-Agent": "AWS-Lambda-Test/1.0"
            },
            "multiValueHeaders": {},
            "requestContext": {
              "requestId": "test-request-id",
              "stage": "test",
              "httpMethod": "GET",
              "path": "/health"
            },
            "body": null,
            "isBase64Encoded": false
          }' > test-payload.json
          aws lambda invoke --function-name $FUNCTION_NAME --payload file://test-payload.json --cli-binary-format raw-in-base64-out response.json

          if [ -f response.json ]; then
            echo "📋 Lambda response:"
            cat response.json
          fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [detect-environment, deploy-infrastructure, build-frontend]
    if: ${{ needs.detect-environment.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-${{ needs.detect-environment.outputs.environment }}-${{ needs.build-frontend.outputs.frontend-hash }}

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ needs.detect-environment.outputs.environment }}

      - name: Deploy to S3
        run: |
          # Extract S3 bucket name from Terraform outputs
          if [ -f outputs.json ]; then
            S3_BUCKET=$(cat outputs.json | jq -r '.website_bucket_name.value // empty')
          fi

          # Fallback to detected bucket name
          if [ -z "$S3_BUCKET" ]; then
            S3_BUCKET="${{ needs.detect-environment.outputs.s3_bucket }}"
          fi

          echo "📤 Deploying frontend to S3 bucket: $S3_BUCKET"
          echo "📁 Current directory contents:"
          ls -la

          # Sync frontend files to S3
          echo "🔄 Syncing files to S3..."
          if [ -f "index.html" ]; then
            echo "✅ Frontend build output found (files extracted to current directory)"
            aws s3 sync . s3://$S3_BUCKET/ --delete --cache-control "max-age=31536000" --exclude "*.html" --exclude "*.json" --exclude "outputs.json"
            aws s3 sync . s3://$S3_BUCKET/ --delete --cache-control "max-age=0" --include "*.html" --include "*.json" --exclude "outputs.json"
          else
            echo "❌ Frontend build output not found"
            echo "📁 Available files:"
            ls -la
            exit 1
          fi

          echo "✅ Frontend deployment completed"

      - name: Invalidate CloudFront Cache
        run: |
          # Extract CloudFront distribution ID from AWS
          DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Aliases.Items || [''], '${{ needs.detect-environment.outputs.domain_name }}')].Id" --output text)

          if [ ! -z "$DISTRIBUTION_ID" ]; then
            echo "🔄 Invalidating CloudFront cache for distribution: $DISTRIBUTION_ID"
            aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
          else
            echo "⚠️ CloudFront distribution not found for domain: ${{ needs.detect-environment.outputs.domain_name }}"
          fi

  # ===========================================
  # Health Checks & Verification
  # ===========================================
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [detect-environment, deploy-backend, deploy-frontend]
    if: ${{ needs.detect-environment.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ needs.detect-environment.outputs.environment }}

      - name: Health Check Internal AWS API (Critical)
        run: |
          echo "🔧 Step 1: Testing Internal AWS API (CRITICAL - must pass)"

          # Get internal API Gateway URL from Terraform outputs
          if [ -f outputs.json ]; then
            INTERNAL_API_URL=$(cat outputs.json | jq -r '.api_url.value // empty')
          fi

          if [ -z "$INTERNAL_API_URL" ]; then
            echo "❌ Could not get internal API URL from Terraform outputs"
            echo "📋 Available outputs:"
            cat outputs.json | jq .
            exit 1
          fi

          echo "🎯 Internal API URL: $INTERNAL_API_URL"
          echo "🏥 Testing internal health endpoint: $INTERNAL_API_URL/health"

          # Test internal API - MUST pass (5 attempts)
          SUCCESS=false
          for i in {1..5}; do
            echo "🔄 Internal API test attempt $i/5..."
            if curl -f "$INTERNAL_API_URL/health" -m 15 -s -o response.json; then
              echo "✅ Internal API health check PASSED"
              echo "📋 Response:"
              cat response.json | jq . 2>/dev/null || cat response.json
              SUCCESS=true
              break
            else
              echo "❌ Internal API test attempt $i/5 failed"
              if [ $i -lt 5 ]; then
                echo "⏳ Waiting 20 seconds before retry..."
                sleep 20
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "🚨 CRITICAL: Internal AWS API failed all 5 attempts"
            echo "🚨 This indicates infrastructure deployment issues"
            echo "🚨 Failing the workflow..."
            exit 1
          fi

          echo "✅ Internal AWS API verification completed successfully"

      - name: Health Check Public Domain API (Warning Only)
        continue-on-error: true
        run: |
          echo ""
          echo "🌐 Step 2: Testing Public Domain API (warning only if fails)"

          PUBLIC_API_URL="${{ needs.detect-environment.outputs.api_url }}"
          echo "🎯 Public API URL: $PUBLIC_API_URL"
          echo "🏥 Testing public health endpoint: $PUBLIC_API_URL/health"

          # Test public API - warn only (3 attempts)
          SUCCESS=false
          for i in {1..3}; do
            echo "🔄 Public API test attempt $i/3..."
            if curl -f "$PUBLIC_API_URL/health" -m 15 -s -o public_response.json; then
              echo "✅ Public API health check PASSED"
              echo "📋 Response:"
              cat public_response.json | jq . 2>/dev/null || cat public_response.json
              SUCCESS=true
              break
            else
              echo "⚠️ Public API test attempt $i/3 failed"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 30 seconds before retry (DNS propagation)..."
                sleep 30
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "⚠️ WARNING: Public domain API failed all 3 attempts"
            echo "⚠️ This is often due to DNS propagation delays"
            echo "⚠️ Internal API is working, so deployment is successful"
            echo "⚠️ Public domain should work within 24 hours"
            
            # Set output for summary
            echo "PUBLIC_API_STATUS=FAILED" >> $GITHUB_ENV
          else
            echo "PUBLIC_API_STATUS=PASSED" >> $GITHUB_ENV
          fi

      - name: Health Check Internal S3 Website (Critical)
        run: |
          echo ""
          echo "🌐 Step 3a: Testing Internal S3 Website (CRITICAL - must pass)"

          # Get internal S3 website URL from Terraform outputs
          if [ -f outputs.json ]; then
            INTERNAL_WEBSITE_URL=$(cat outputs.json | jq -r '.website_url.value // empty')
            S3_BUCKET=$(cat outputs.json | jq -r '.website_bucket_name.value // empty')
          fi

          # Fallback to construct S3 website URL if not in outputs
          if [ -z "$INTERNAL_WEBSITE_URL" ] && [ -n "$S3_BUCKET" ]; then
            INTERNAL_WEBSITE_URL="http://${S3_BUCKET}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
          fi

          if [ -z "$INTERNAL_WEBSITE_URL" ] || [ -z "$S3_BUCKET" ]; then
            echo "❌ Could not get S3 bucket info from Terraform outputs"
            echo "📋 Available outputs:"
            cat outputs.json | jq .
            exit 1
          fi

          echo "🎯 S3 Bucket: $S3_BUCKET"
          echo "🎯 Internal S3 Website URL: $INTERNAL_WEBSITE_URL"

          # Step 1: Check if S3 bucket exists and get info
          echo ""
          echo "🔍 Step 1: Checking S3 bucket existence and configuration..."
          if aws s3api head-bucket --bucket "$S3_BUCKET" 2>/dev/null; then
            echo "✅ S3 bucket exists: $S3_BUCKET"
          else
            echo "❌ S3 bucket does not exist or is not accessible: $S3_BUCKET"
            exit 1
          fi

          # Step 2: Check website configuration
          echo ""
          echo "🔍 Step 2: Checking S3 website configuration..."
          if aws s3api get-bucket-website --bucket "$S3_BUCKET" > website-config.json 2>/dev/null; then
            echo "✅ S3 website configuration enabled"
            echo "📋 Website config:"
            cat website-config.json | jq .
          else
            echo "❌ S3 website configuration not enabled"
            echo "🔧 This bucket is not configured for static website hosting"
            exit 1
          fi

          # Step 3: Check if files were deployed
          echo ""
          echo "🔍 Step 3: Checking deployed files..."
          FILE_COUNT=$(aws s3 ls s3://$S3_BUCKET/ --recursive | wc -l)
          echo "📁 Files in bucket: $FILE_COUNT"

          if [ "$FILE_COUNT" -eq 0 ]; then
            echo "❌ No files found in S3 bucket"
            echo "🚨 Frontend deployment may have failed"
            exit 1
          fi

          # Check for index.html specifically
          if aws s3api head-object --bucket "$S3_BUCKET" --key "index.html" >/dev/null 2>&1; then
            echo "✅ index.html found in bucket"
          else
            echo "❌ index.html not found in bucket"
            echo "📋 Available files:"
            aws s3 ls s3://$S3_BUCKET/ --recursive | head -10
            exit 1
          fi

          # Step 4: Check bucket policy for public read access
          echo ""
          echo "🔍 Step 4: Checking bucket policy..."
          CLOUDFRONT_ONLY=false
          if aws s3api get-bucket-policy --bucket "$S3_BUCKET" > bucket-policy.json 2>/dev/null; then
            echo "✅ Bucket policy exists"
            echo "📋 Policy summary:"
            cat bucket-policy.json | jq '.Policy | fromjson | .Statement[] | {Effect, Principal, Action}' 2>/dev/null || echo "Policy format check failed"
            
            # Check if this is a CloudFront-only policy
            if cat bucket-policy.json | jq '.Policy | fromjson | .Statement[] | select(.Principal.Service == "cloudfront.amazonaws.com")' | grep -q "cloudfront"; then
              echo "🔍 Detected CloudFront-only bucket policy"
              CLOUDFRONT_ONLY=true
            fi
          else
            echo "⚠️ No bucket policy found - checking if bucket is publicly accessible"
          fi

          # Step 5: Determine correct URL to test based on policy type
          echo ""
          if [ "$CLOUDFRONT_ONLY" = true ]; then
            echo "🔍 Step 5a: CloudFront distribution detected - finding CloudFront URL..."
            
            # Try multiple methods to get CloudFront distribution URL
            CLOUDFRONT_URL=""
            
            # Method 1: Try to get CloudFront distribution URL from Terraform outputs
            if [ -f outputs.json ]; then
              CLOUDFRONT_URL=$(cat outputs.json | jq -r '.cloudfront_distribution_domain_name.value // empty' 2>/dev/null)
              if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "null" ] && [ "$CLOUDFRONT_URL" != "empty" ]; then
                echo "✅ Found CloudFront URL in Terraform outputs: $CLOUDFRONT_URL"
              else
                CLOUDFRONT_URL=""
              fi
            fi
            
            # Method 2: Search by S3 bucket domain name
            if [ -z "$CLOUDFRONT_URL" ]; then
              echo "🔍 Searching for CloudFront distribution for bucket $S3_BUCKET..."
              CLOUDFRONT_URL=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '$S3_BUCKET')].DomainName" --output text 2>/dev/null | head -1)
              if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
                echo "✅ Found CloudFront distribution via bucket search: $CLOUDFRONT_URL"
              else
                CLOUDFRONT_URL=""
              fi
            fi
            
            # Method 3: Search by S3 direct access endpoint (common CloudFront setup)
            if [ -z "$CLOUDFRONT_URL" ]; then
              echo "🔍 Searching for CloudFront distribution for S3 direct access endpoint..."
              S3_DIRECT_DOMAIN="${S3_BUCKET}.s3.${{ env.AWS_REGION }}.amazonaws.com"
              CLOUDFRONT_URL=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '$S3_DIRECT_DOMAIN')].DomainName" --output text 2>/dev/null | head -1)
              if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
                echo "✅ Found CloudFront distribution via S3 direct access: $CLOUDFRONT_URL"
              else
                CLOUDFRONT_URL=""
              fi
            fi
            
            # Method 4: Search by S3 website endpoint
            if [ -z "$CLOUDFRONT_URL" ]; then
              echo "🔍 Searching for CloudFront distribution for S3 website endpoint..."
              S3_WEBSITE_DOMAIN="${S3_BUCKET}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
              CLOUDFRONT_URL=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '$S3_WEBSITE_DOMAIN')].DomainName" --output text 2>/dev/null | head -1)
              if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
                echo "✅ Found CloudFront distribution via website endpoint: $CLOUDFRONT_URL"
              else
                CLOUDFRONT_URL=""
              fi
            fi
            
            # Method 5: List all distributions and show for debugging
            if [ -z "$CLOUDFRONT_URL" ]; then
              echo "🔍 Listing all CloudFront distributions for debugging..."
              aws cloudfront list-distributions --query "DistributionList.Items[*].{DomainName:DomainName,Status:Status,Origins:Origins.Items[0].DomainName}" --output table 2>/dev/null || echo "Failed to list CloudFront distributions"
            fi
            
            if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
              TEST_URL="https://$CLOUDFRONT_URL"
              echo "🌐 Testing CloudFront endpoint: $TEST_URL"
              SHOULD_FAIL_ON_ERROR=true
            else
              echo "⚠️ CloudFront distribution not found"
              echo "⚠️ This is common for fresh deployments (CloudFront takes 15-20 minutes)"
              echo "⚠️ Will test S3 direct endpoint but expect it to fail"
              TEST_URL="$INTERNAL_WEBSITE_URL"
              SHOULD_FAIL_ON_ERROR=false  # Don't fail the workflow for CloudFront timing issues
            fi
          else
            echo "🔍 Step 5b: Testing direct S3 website endpoint..."
            TEST_URL="$INTERNAL_WEBSITE_URL"
            echo "🌐 Testing direct S3 website endpoint: $TEST_URL"
            SHOULD_FAIL_ON_ERROR=true
          fi

          # Test the appropriate endpoint with detailed diagnostics
          SUCCESS=false
          for i in {1..3}; do
            echo "🔄 Website test attempt $i/3..."
            
            # Get detailed curl response
            HTTP_CODE=$(curl -s -o response.html -w "%{http_code}" "$TEST_URL" -m 15)
            
            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Website health check PASSED (HTTP $HTTP_CODE)"
              echo "📋 Response size: $(wc -c < response.html 2>/dev/null || echo 'unknown') bytes"
              SUCCESS=true
              break
            else
              echo "❌ Website test failed (HTTP $HTTP_CODE)"
              
              # Provide specific error guidance based on endpoint type
              if [ "$CLOUDFRONT_ONLY" = true ]; then
                case "$HTTP_CODE" in
                  "403")
                    if [ -n "$CLOUDFRONT_URL" ]; then
                      echo "🚨 HTTP 403: CloudFront access denied - distribution may not be deployed yet"
                    else
                      echo "⚠️ HTTP 403: Expected - testing S3 direct with CloudFront-only policy"
                    fi
                    ;;
                  "404") 
                    echo "🚨 HTTP 404: CloudFront distribution not found or not configured"
                    ;;
                  "000")
                    echo "🚨 HTTP 000: Connection failed - CloudFront distribution may not exist"
                    ;;
                  *)
                    echo "🚨 HTTP $HTTP_CODE: Unexpected CloudFront response"
                    ;;
                esac
              else
                case "$HTTP_CODE" in
                  "403")
                    echo "🚨 HTTP 403: S3 access denied - bucket policy needs public read access"
                    ;;
                  "404") 
                    echo "🚨 HTTP 404: S3 website not found - website configuration issue"
                    ;;
                  "000")
                    echo "🚨 HTTP 000: Connection failed - DNS or network issue"
                    ;;
                  *)
                    echo "🚨 HTTP $HTTP_CODE: Unexpected S3 response"
                    ;;
                esac
              fi
              
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 20 seconds before retry..."
                sleep 20
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            if [ "$SHOULD_FAIL_ON_ERROR" = true ]; then
              echo "🚨 CRITICAL: Website failed all diagnostic checks"
            else
              echo "⚠️ WARNING: Website test failed but this is expected for fresh CloudFront deployments"
            fi
            echo "🚨 Last HTTP response code: $HTTP_CODE"
            echo "🚨 Tested URL: $TEST_URL"
            
            # Additional debugging info based on endpoint type
            echo ""
            echo "🔧 Debugging Information:"
            echo "  Bucket: $S3_BUCKET"
            echo "  CloudFront-only policy: $CLOUDFRONT_ONLY"
            if [ "$CLOUDFRONT_ONLY" = true ]; then
              echo "  CloudFront URL: ${CLOUDFRONT_URL:-'Not found'}"
              echo "  S3 Website URL: $INTERNAL_WEBSITE_URL (restricted by policy)"
            else
              echo "  S3 Website URL: $INTERNAL_WEBSITE_URL"
            fi
            echo "  Files in bucket: $FILE_COUNT"
            echo "  Region: ${{ env.AWS_REGION }}"
            
            echo ""
            echo "🔧 Possible fixes:"
            if [ "$CLOUDFRONT_ONLY" = true ]; then
              if [ -z "$CLOUDFRONT_URL" ]; then
                echo "  1. CloudFront distribution may still be deploying (15-20 minutes typical)"
                echo "  2. Check Terraform configuration includes CloudFront distribution"
                echo "  3. Verify CloudFront distribution was created successfully"
                echo "  4. Check AWS Console CloudFront section for deployment status"
                echo "  5. Try accessing the website again in 15-30 minutes"
              else
                echo "  1. CloudFront distribution found but not accessible yet"
                echo "  2. Wait for CloudFront deployment to complete (can take 15-20 minutes)"
                echo "  3. Check CloudFront distribution status in AWS Console"
                echo "  4. Verify CloudFront distribution points to correct S3 bucket"
              fi
            else
              echo "  1. Update S3 bucket policy to allow public read access"
              echo "  2. Add public read policy: {\"Principal\": \"*\", \"Action\": \"s3:GetObject\"}"
              echo "  3. Check if frontend deployment step succeeded"
              echo "  4. Verify S3 website configuration is correct"
            fi
            
            # Only fail workflow for non-CloudFront setups or when CloudFront URL is found but still failing
            if [ "$SHOULD_FAIL_ON_ERROR" = true ]; then
              exit 1
            else
              echo ""
              echo "⚠️ Continuing workflow despite website test failure"
              echo "⚠️ This is expected for fresh CloudFront deployments"
              echo "⚠️ Check website functionality in 15-30 minutes"
            fi
          else
            echo "✅ Website verification completed successfully"
          fi

      - name: Health Check Public Domain Website (Warning Only)
        continue-on-error: true
        run: |
          echo ""
          echo "🌐 Step 3b: Testing Public Domain Website (warning only if fails)"

          PUBLIC_WEBSITE_URL="https://${{ needs.detect-environment.outputs.domain_name }}"
          echo "🎯 Public Website URL: $PUBLIC_WEBSITE_URL"

          # Test public domain website - warn only (3 attempts)
          SUCCESS=false
          for i in {1..3}; do
            echo "🔄 Public website test attempt $i/3..."
            if curl -f "$PUBLIC_WEBSITE_URL" -m 15 -s -o /dev/null; then
              echo "✅ Public domain website health check PASSED"
              SUCCESS=true
              break
            else
              echo "⚠️ Public website test attempt $i/3 failed"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 30 seconds before retry (DNS propagation)..."
                sleep 30
              fi
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo ""
            echo "⚠️ WARNING: Public domain website failed all 3 attempts"
            echo "⚠️ This is often due to DNS propagation delays"
            echo "⚠️ Internal S3 website is working, so deployment is successful"
            echo "⚠️ Public domain should work within 24 hours"
            echo "WEBSITE_STATUS=FAILED" >> $GITHUB_ENV
          else
            echo "WEBSITE_STATUS=PASSED" >> $GITHUB_ENV
          fi

      - name: Deployment Summary
        run: |
          echo ""
          echo "🎉 Deployment Summary"
          echo "===================="
          echo "Environment: ${{ needs.detect-environment.outputs.environment }}"
          echo ""
          echo "🔧 Infrastructure Status (Critical - All Verified ✅):"
          echo "  Internal API: ✅ PASSED (AWS infrastructure verified)"
          echo "  Internal S3 Website: ✅ PASSED (S3 static hosting verified)"
          echo ""
          echo "🌐 Public Domain Status (DNS-dependent):"
          echo "  Public API: ${PUBLIC_API_STATUS:-UNKNOWN}"
          echo "  Public Website: ${WEBSITE_STATUS:-UNKNOWN}"
          echo ""
          echo "📍 URLs:"
          echo "  Internal API: $(cat outputs.json | jq -r '.api_url.value // "N/A"')"
          echo "  Internal S3 Website: $(cat outputs.json | jq -r '.website_url.value // "N/A"')"
          echo "  Public API: ${{ needs.detect-environment.outputs.api_url }}"
          echo "  Public Website: https://${{ needs.detect-environment.outputs.domain_name }}"
          echo ""
          echo "🔧 Infrastructure Details:"
          echo "  Function: ${{ needs.detect-environment.outputs.function_name }}"
          echo "  S3 Bucket: ${{ needs.detect-environment.outputs.s3_bucket }}"
          echo "  AWS Region: ${{ env.AWS_REGION }}"
          echo ""
          if [ "${PUBLIC_API_STATUS}" = "FAILED" ] || [ "${WEBSITE_STATUS}" = "FAILED" ]; then
            echo "⚠️ DNS PROPAGATION NOTES:"
            if [ "${PUBLIC_API_STATUS}" = "FAILED" ]; then
              echo "  - Public API domain (qa03-api.hibiji.com) may need DNS propagation time"
            fi
            if [ "${WEBSITE_STATUS}" = "FAILED" ]; then
              echo "  - Public website domain (qa03.hibiji.com) may need DNS propagation time"
            fi
            echo "  - DNS propagation can take up to 24 hours globally"
            echo "  - Internal AWS infrastructure is verified and working correctly"
            echo "  - You can test using internal URLs immediately"
            echo "  - Check public URLs again in a few hours"
          else
            echo "🎉 All endpoints verified and working correctly!"
          fi
          echo ""
          echo "✅ Serverless deployment completed successfully!"
          echo "✅ All critical infrastructure components verified working!"
