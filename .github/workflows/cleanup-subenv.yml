name: Cleanup Sub-Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Sub-environment to clean up (e.g., dev01, qa02, staging03)"
        required: true
        type: string
      force_cleanup:
        description: "Force cleanup without confirmation"
        required: false
        default: false
        type: boolean
      dry_run:
        description: "Perform a dry run (show what would be deleted)"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-1

jobs:
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # Validate environment name format
          if [[ ! "$ENVIRONMENT" =~ ^(dev|qa|staging|hotfix)[0-9][0-9]$ ]]; then
            echo "❌ Invalid environment format: $ENVIRONMENT"
            echo "Valid formats: dev01-dev99, qa01-qa99, staging01-staging99, hotfix01-hotfix99"
            exit 1
          fi

          # Extract main environment
          MAIN_ENV=$(echo "$ENVIRONMENT" | sed 's/[0-9]*$//')

          echo "✅ Environment validation passed"
          echo "Sub-environment: $ENVIRONMENT"
          echo "Main environment: $MAIN_ENV"

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "MAIN_ENV=$MAIN_ENV" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ env.MAIN_ENV }}
        run: |
          echo "🧹 Destroying infrastructure for ${{ env.ENVIRONMENT }}..."

          # Initialize Terraform with proper backend configuration
          echo "🔧 Configuring Terraform backend for ${{ env.MAIN_ENV }}/${{ env.ENVIRONMENT }}..."
          terraform init -backend-config="key=${{ env.MAIN_ENV }}/${{ env.ENVIRONMENT }}/terraform.tfstate" -reconfigure

          # Create tfvars file
          cat > environment.auto.tfvars << EOF
          environment = "${{ env.MAIN_ENV }}"
          sub_environment = "${{ env.ENVIRONMENT }}"
          project_name = "dpp"
          domain_name = "hibiji.com"
          aws_region = "${{ env.AWS_REGION }}"
          alert_emails = ["alerts@maras.co"]
          EOF

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Showing what would be destroyed..."
            timeout 900 terraform plan -destroy -var-file="environment.auto.tfvars"
          else
            echo "🚨 DESTROYING infrastructure..."
            
            if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
              echo "⏰ Running terraform destroy with 30-minute timeout..."
              timeout 1800 terraform destroy -auto-approve -var-file="environment.auto.tfvars" -lock-timeout=600s
            else
              echo "❌ Manual approval required. Set force_cleanup=true to proceed."
              exit 1
            fi
          fi

      - name: Clean up orphaned AWS resources
        if: always() && github.event.inputs.dry_run != 'true' && github.event.inputs.force_cleanup == 'true'
        # Run comprehensive cleanup even if Terraform destroy fails
        # Uses the new dynamic cleanup script for safety
        run: |
          echo "🧹 Using dynamic cleanup script for ${{ env.ENVIRONMENT }}..."

          # Install jq for JSON processing (needed for Route53 record cleanup)
          sudo apt-get update && sudo apt-get install -y jq

          # Make the script executable
          chmod +x scripts/dynamic-cleanup-environment.sh

          # Run the dynamic cleanup script with force flag (skip confirmation in CI)
          FORCE_CLEANUP=true PROJECT_NAME=dpp ./scripts/dynamic-cleanup-environment.sh "${{ env.ENVIRONMENT }}"

      - name: Cleanup Summary
        if: always()
        run: |
          echo "🎯 Cleanup Summary"
          echo "=================="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Main Environment: ${{ env.MAIN_ENV }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "Force Cleanup: ${{ github.event.inputs.force_cleanup }}"
          echo ""

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "✅ Dry run completed - no resources were deleted"
          elif [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
            echo "✅ Dynamic cleanup completed for environment: ${{ env.ENVIRONMENT }}"
            echo ""
            echo "🎯 Cleanup Method: Dynamic environment-specific script with VPC-aware orphaned resource detection"
            echo "📋 Resources cleaned up (dynamically scoped to ${{ env.ENVIRONMENT }}):"
            echo "  • All Terraform-managed infrastructure"
            echo "  • AWS Batch resources (Job Queues → Compute Environments)"
            echo "  • SQS queues (main + dead letter queues)"
            echo "  • Lambda functions"
            echo "  • RDS clusters and instances"
            echo "  • DB Subnet Groups (including orphaned ones in wrong VPCs)"
            echo "  • RDS Proxy endpoints (including orphaned ones)"
            echo "  • S3 buckets (with versioned object cleanup)"
            echo "  • Route53 DNS records"
            echo "  • VPC infrastructure (subnets, gateways, security groups)"
            echo "  • IAM roles and policies"
            echo "  • ECR repositories"
            echo "  • Network interfaces (ENIs)"
            echo ""
            echo "🔒 Safety: Only resources matching '${{ env.ENVIRONMENT }}-dpp*' pattern were deleted"
            echo "🛠️ Enhanced: Detects and removes orphaned resources across VPCs and naming patterns"
          else
            echo "❌ Cleanup was not performed (force_cleanup not enabled)"
          fi
