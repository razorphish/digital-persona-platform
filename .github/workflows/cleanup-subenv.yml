name: Cleanup Sub-Environment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Sub-environment to clean up (e.g., dev01, qa02, staging03)"
        required: true
        type: string
      force_cleanup:
        description: "Force cleanup without confirmation"
        required: false
        default: false
        type: boolean
      dry_run:
        description: "Perform a dry run (show what would be deleted)"
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-1

jobs:
  cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"

          # Validate environment name format
          if [[ ! "$ENVIRONMENT" =~ ^(dev|qa|staging|hotfix)[0-9][0-9]$ ]]; then
            echo "‚ùå Invalid environment format: $ENVIRONMENT"
            echo "Valid formats: dev01-dev99, qa01-qa99, staging01-staging99, hotfix01-hotfix99"
            exit 1
          fi

          # Extract main environment
          MAIN_ENV=$(echo "$ENVIRONMENT" | sed 's/[0-9]*$//')

          echo "‚úÖ Environment validation passed"
          echo "Sub-environment: $ENVIRONMENT"
          echo "Main environment: $MAIN_ENV"

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "MAIN_ENV=$MAIN_ENV" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Destroy
        working-directory: terraform/environments/${{ env.MAIN_ENV }}
        run: |
          echo "üßπ Destroying infrastructure for ${{ env.ENVIRONMENT }}..."

          # Initialize Terraform
          terraform init

          # Create tfvars file
          cat > environment.auto.tfvars << EOF
          environment = "${{ env.MAIN_ENV }}"
          sub_environment = "${{ env.ENVIRONMENT }}"
          project_name = "dpp"
          domain_name = "hibiji.com"
          aws_region = "${{ env.AWS_REGION }}"
          alert_emails = ["alerts@maras.co"]
          EOF

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç DRY RUN: Showing what would be destroyed..."
            terraform plan -destroy -var-file="environment.auto.tfvars"
          else
            echo "üö® DESTROYING infrastructure..."
            
            if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
              terraform destroy -auto-approve -var-file="environment.auto.tfvars"
            else
              echo "‚ùå Manual approval required. Set force_cleanup=true to proceed."
              exit 1
            fi
          fi

      - name: Clean up orphaned AWS resources
        if: github.event.inputs.dry_run != 'true' && github.event.inputs.force_cleanup == 'true'
        run: |
          echo "üßπ Cleaning up orphaned AWS resources for ${{ env.ENVIRONMENT }}..."

          ENVIRONMENT="${{ env.ENVIRONMENT }}"
          MAIN_ENV="${{ env.MAIN_ENV }}"
          PROJECT_NAME="dpp"

          # Clean up Lambda functions
          echo "üßπ Cleaning up Lambda functions..."
          LAMBDA_FUNCTIONS=$(aws lambda list-functions \
            --query "Functions[?starts_with(FunctionName, '${MAIN_ENV}-${ENVIRONMENT}')].FunctionName" \
            --output text)

          for func in $LAMBDA_FUNCTIONS; do
            if [ -n "$func" ] && [ "$func" != "None" ]; then
              echo "üóëÔ∏è Deleting Lambda function: $func"
              aws lambda delete-function --function-name "$func" || echo "‚ö†Ô∏è Failed to delete Lambda function: $func"
            fi
          done

          # Clean up API Gateway v2 APIs
          echo "üßπ Cleaning up API Gateway v2 APIs..."
          API_IDS=$(aws apigatewayv2 get-apis \
            --query "Items[?starts_with(Name, '${MAIN_ENV}-${ENVIRONMENT}')].ApiId" \
            --output text)

          for api_id in $API_IDS; do
            if [ -n "$api_id" ] && [ "$api_id" != "None" ]; then
              echo "üóëÔ∏è Deleting API Gateway: $api_id"
              aws apigatewayv2 delete-api --api-id "$api_id" || echo "‚ö†Ô∏è Failed to delete API Gateway: $api_id"
            fi
          done

          # Clean up S3 buckets
          echo "üßπ Cleaning up S3 buckets..."
          S3_BUCKETS=$(aws s3api list-buckets \
            --query "Buckets[?starts_with(Name, '${MAIN_ENV}-${ENVIRONMENT}')].Name" \
            --output text)

          for bucket in $S3_BUCKETS; do
            if [ -n "$bucket" ] && [ "$bucket" != "None" ]; then
              echo "üóëÔ∏è Emptying and deleting S3 bucket: $bucket"
              aws s3 rm s3://$bucket --recursive || echo "‚ö†Ô∏è Failed to empty bucket: $bucket"
              aws s3api delete-bucket --bucket "$bucket" || echo "‚ö†Ô∏è Failed to delete bucket: $bucket"
            fi
          done

          # Clean up CloudWatch Log Groups
          echo "üßπ Cleaning up CloudWatch Log Groups..."
          LOG_GROUPS=$(aws logs describe-log-groups \
            --query "logGroups[?contains(logGroupName, '${ENVIRONMENT}')].logGroupName" \
            --output text)

          for log_group in $LOG_GROUPS; do
            if [ -n "$log_group" ] && [ "$log_group" != "None" ]; then
              echo "üóëÔ∏è Deleting log group: $log_group"
              aws logs delete-log-group --log-group-name "$log_group" || echo "‚ö†Ô∏è Failed to delete log group: $log_group"
            fi
          done

          # Clean up Secrets Manager secrets
          echo "üßπ Cleaning up Secrets Manager secrets..."
          SECRETS=$(aws secretsmanager list-secrets \
            --query "SecretList[?starts_with(Name, '${MAIN_ENV}-${ENVIRONMENT}')].Name" \
            --output text)

          for secret in $SECRETS; do
            if [ -n "$secret" ] && [ "$secret" != "None" ]; then
              echo "üóëÔ∏è Deleting secret: $secret"
              aws secretsmanager delete-secret --secret-id "$secret" --force-delete-without-recovery || echo "‚ö†Ô∏è Failed to delete secret: $secret"
            fi
          done

          # Clean up RDS instances and clusters
          echo "üßπ Cleaning up RDS resources..."
          RDS_CLUSTERS=$(aws rds describe-db-clusters \
            --query "DBClusters[?starts_with(DBClusterIdentifier, '${ENVIRONMENT}')].DBClusterIdentifier" \
            --output text)

          for cluster in $RDS_CLUSTERS; do
            if [ -n "$cluster" ] && [ "$cluster" != "None" ]; then
              echo "üóëÔ∏è Deleting RDS cluster: $cluster"
              # Delete cluster instances first
              CLUSTER_INSTANCES=$(aws rds describe-db-clusters \
                --db-cluster-identifier "$cluster" \
                --query "DBClusters[0].DBClusterMembers[*].DBInstanceIdentifier" \
                --output text)
              
              for instance in $CLUSTER_INSTANCES; do
                if [ -n "$instance" ] && [ "$instance" != "None" ]; then
                  echo "üóëÔ∏è Deleting RDS instance: $instance"
                  aws rds delete-db-instance --db-instance-identifier "$instance" --skip-final-snapshot || echo "‚ö†Ô∏è Failed to delete RDS instance: $instance"
                fi
              done
              
              # Wait for instances to be deleted before deleting cluster
              echo "‚è≥ Waiting for instances to be deleted..."
              sleep 60
              
              aws rds delete-db-cluster --db-cluster-identifier "$cluster" --skip-final-snapshot || echo "‚ö†Ô∏è Failed to delete RDS cluster: $cluster"
            fi
          done

          # Clean up CloudFront distributions
          echo "üßπ Cleaning up CloudFront distributions..."
          DISTRIBUTIONS=$(aws cloudfront list-distributions \
            --query "DistributionList.Items[?contains(Aliases.Items || [''], '${ENVIRONMENT}')].{Id:Id,DomainName:DomainName}" \
            --output text)

          if [ -n "$DISTRIBUTIONS" ] && [ "$DISTRIBUTIONS" != "None" ]; then
            echo "$DISTRIBUTIONS" | while read id domain; do
              if [ -n "$id" ] && [ "$id" != "None" ]; then
                echo "üóëÔ∏è Disabling CloudFront distribution: $id ($domain)"
                
                # Get current distribution config
                aws cloudfront get-distribution-config --id "$id" --query 'DistributionConfig' > dist_config.json
                ETAG=$(aws cloudfront get-distribution-config --id "$id" --query 'ETag' --output text)
                
                # Disable distribution
                jq '.Enabled = false' dist_config.json > dist_config_disabled.json
                aws cloudfront update-distribution --id "$id" --distribution-config file://dist_config_disabled.json --if-match "$ETAG" || echo "‚ö†Ô∏è Failed to disable distribution: $id"
                
                echo "‚è≥ Distribution disabled. Manual deletion required after propagation."
              fi
            done
          fi

      - name: Cleanup Summary
        if: always()
        run: |
          echo "üéØ Cleanup Summary"
          echo "=================="
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Main Environment: ${{ env.MAIN_ENV }}"
          echo "Dry Run: ${{ github.event.inputs.dry_run }}"
          echo "Force Cleanup: ${{ github.event.inputs.force_cleanup }}"
          echo ""

          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "‚úÖ Dry run completed - no resources were deleted"
          elif [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
            echo "‚úÖ Cleanup completed for environment: ${{ env.ENVIRONMENT }}"
            echo ""
            echo "üìã Resources cleaned up:"
            echo "  ‚Ä¢ Terraform-managed infrastructure"
            echo "  ‚Ä¢ Lambda functions"
            echo "  ‚Ä¢ API Gateway v2 APIs"
            echo "  ‚Ä¢ S3 buckets"
            echo "  ‚Ä¢ CloudWatch Log Groups"
            echo "  ‚Ä¢ Secrets Manager secrets"
            echo "  ‚Ä¢ RDS clusters and instances"
            echo "  ‚Ä¢ CloudFront distributions (disabled)"
            echo ""
            echo "‚ö†Ô∏è Note: CloudFront distributions require manual deletion after propagation"
          else
            echo "‚ùå Cleanup was not performed (force_cleanup not enabled)"
          fi
