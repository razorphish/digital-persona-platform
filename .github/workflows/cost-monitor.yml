name: Cost Monitoring (Simplified)

on:
  schedule:
    # Run every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write

env:
  AWS_REGION: us-west-1

jobs:
  cost-monitoring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current costs
        run: |
          echo "📊 Fetching current AWS costs..."

          # Get current month costs
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "+1 month" +%Y-%m-01)

          # Get costs by service for current month
          echo "## 💰 Current Month Cost Breakdown" > cost_report.md
          echo "Generated: $(date)" >> cost_report.md
          echo "" >> cost_report.md

          # Total estimated costs
          TOTAL_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)

          echo "### 📈 Total Estimated Cost: \$${TOTAL_COST}" >> cost_report.md
          echo "" >> cost_report.md

          # Costs by service (top 10)
          echo "### 🏗️ Top Services by Cost" >> cost_report.md
          aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --query 'ResultsByTime[0].Groups' \
            --output table >> cost_report.md

          echo "" >> cost_report.md

          # Enhanced analysis using only AWS CLI
          echo "### 🔍 Enhanced Analysis (CLI Only)" >> cost_report.md
          echo "" >> cost_report.md

          # Get top 5 services with costs
          TOP_SERVICES=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --query 'ResultsByTime[0].Groups[0:5].[Keys[0],Metrics.BlendedCost.Amount]' \
            --output text)

          echo "**Top 5 Cost Services:**" >> cost_report.md
          echo "\`\`\`" >> cost_report.md
          echo "$TOP_SERVICES" >> cost_report.md
          echo "\`\`\`" >> cost_report.md
          echo "" >> cost_report.md

          # Cost trends (last 3 months)
          echo "### 📈 3-Month Cost Trend" >> cost_report.md
          THREE_MONTHS_AGO=$(date -d "-3 months" +%Y-%m-01)
          aws ce get-cost-and-usage \
            --time-period Start=$THREE_MONTHS_AGO,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[*].{Month:TimePeriod.Start,Cost:Total.BlendedCost.Amount}' \
            --output table >> cost_report.md

          echo "" >> cost_report.md

      - name: Generate optimization recommendations
        run: |
          echo "## 💡 Cost Optimization Recommendations" >> cost_report.md
          echo "" >> cost_report.md

          # Get current month for analysis
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "+1 month" +%Y-%m-01)

          # Check Lambda costs
          LAMBDA_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["AWS Lambda"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          # Generate smart recommendations based on costs
          if (( $(echo "$LAMBDA_COST > 10" | bc -l) )); then
            echo "### ⚡ Lambda Optimization" >> cost_report.md
            echo "- Lambda costs: \$${LAMBDA_COST}" >> cost_report.md
            echo "- Consider reviewing memory allocation and execution time" >> cost_report.md
            echo "- Remove unused function versions" >> cost_report.md
            echo "" >> cost_report.md
          fi

          # S3 optimization
          S3_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["Amazon Simple Storage Service"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          if (( $(echo "$S3_COST > 5" | bc -l) )); then
            echo "### 🪣 S3 Optimization" >> cost_report.md
            echo "- S3 costs: \$${S3_COST}" >> cost_report.md
            echo "- Implement lifecycle policies for old data" >> cost_report.md
            echo "- Consider Intelligent Tiering" >> cost_report.md
            echo "" >> cost_report.md
          fi

          # General recommendations
          echo "### 📋 General Recommendations" >> cost_report.md
          echo "- Monitor unused resources regularly" >> cost_report.md
          echo "- Use Reserved Instances for predictable workloads" >> cost_report.md
          echo "- Enable detailed monitoring for better insights" >> cost_report.md
          echo "- Set up budget alerts for proactive monitoring" >> cost_report.md

      - name: Cost alert check
        run: |
          echo "## 🚨 Cost Alerts" >> cost_report.md
          echo "" >> cost_report.md

          # Check if current costs exceed thresholds
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "+1 month" +%Y-%m-01)

          TOTAL_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)

          # Convert to integer for comparison (multiply by 100 to handle decimals)
          TOTAL_COST_CENTS=$(echo "$TOTAL_COST * 100" | bc | cut -d. -f1)
          WARNING_THRESHOLD_CENTS=5000  # $50.00
          CRITICAL_THRESHOLD_CENTS=10000 # $100.00

          if [ "$TOTAL_COST_CENTS" -gt "$CRITICAL_THRESHOLD_CENTS" ]; then
            echo "🔴 **CRITICAL**: Monthly costs (\$${TOTAL_COST}) exceed \$100 threshold!" >> cost_report.md
            echo "COST_ALERT=critical" >> $GITHUB_ENV
          elif [ "$TOTAL_COST_CENTS" -gt "$WARNING_THRESHOLD_CENTS" ]; then
            echo "🟡 **WARNING**: Monthly costs (\$${TOTAL_COST}) exceed \$50 threshold" >> cost_report.md
            echo "COST_ALERT=warning" >> $GITHUB_ENV
          else
            echo "✅ **OK**: Monthly costs (\$${TOTAL_COST}) are within acceptable limits" >> cost_report.md
            echo "COST_ALERT=ok" >> $GITHUB_ENV
          fi

          echo "" >> cost_report.md

      - name: Create or update cost monitoring issue
        if: env.COST_ALERT != 'ok'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const costReport = fs.readFileSync('cost_report.md', 'utf8');

            const alertLevel = process.env.COST_ALERT;
            const title = alertLevel === 'critical' 
              ? '🔴 CRITICAL: AWS Cost Alert - Monthly costs exceed $100'
              : '🟡 WARNING: AWS Cost Alert - Monthly costs exceed $50';

            // Check if there's an existing cost monitoring issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['cost-monitoring'],
              state: 'open'
            });

            const issueBody = `${costReport}

            ---
            *This issue was automatically generated by the simplified cost monitoring workflow.*
            *Last updated: ${new Date().toISOString()}*`;

            if (issues.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                title: title,
                body: issueBody,
                labels: ['cost-monitoring', alertLevel === 'critical' ? 'priority-high' : 'priority-medium']
              });
              
              console.log(`Updated existing cost monitoring issue #${issues[0].number}`);
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issueBody,
                labels: ['cost-monitoring', alertLevel === 'critical' ? 'priority-high' : 'priority-medium']
              });
              
              console.log('Created new cost monitoring issue');
            }

      - name: Upload cost report
        uses: actions/upload-artifact@v4
        with:
          name: cost-report-simplified-${{ github.run_number }}
          path: cost_report.md
