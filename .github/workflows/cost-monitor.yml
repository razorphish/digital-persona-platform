name: Cost Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: "0 */6 * * *"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  issues: write

env:
  AWS_REGION: us-west-1

jobs:
  cost-monitoring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current costs
        run: |
          echo "📊 Fetching current AWS costs..."

          # Get current month costs
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "+1 month" +%Y-%m-01)

          # Get costs by service for current month
          echo "## 💰 Current Month Cost Breakdown" > cost_report.md
          echo "Generated: $(date)" >> cost_report.md
          echo "" >> cost_report.md

          # Total estimated costs
          TOTAL_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)

          echo "### 📈 Total Estimated Cost: \$${TOTAL_COST}" >> cost_report.md
          echo "" >> cost_report.md

          # Costs by service (top 10)
          echo "### 🏗️ Top Services by Cost" >> cost_report.md
          aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --query 'ResultsByTime[0].Groups' \
            --output table >> cost_report.md

          echo "" >> cost_report.md

          # Serverless services breakdown (restored original format)
          echo "### ⚡ Serverless Services Breakdown" >> cost_report.md
          echo "" >> cost_report.md

          # Lambda costs
          LAMBDA_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["AWS Lambda"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          echo "- **AWS Lambda**: \$${LAMBDA_COST}" >> cost_report.md

          # API Gateway costs
          APIGATEWAY_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["Amazon API Gateway"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          echo "- **API Gateway**: \$${APIGATEWAY_COST}" >> cost_report.md

          # S3 costs
          S3_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["Amazon Simple Storage Service"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          echo "- **S3 Storage**: \$${S3_COST}" >> cost_report.md

          # RDS costs
          RDS_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["Amazon Relational Database Service"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          echo "- **RDS (Aurora Serverless)**: \$${RDS_COST}" >> cost_report.md

          # CloudFront costs
          CLOUDFRONT_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --group-by Type=DIMENSION,Key=SERVICE \
            --filter '{"Dimensions":{"Key":"SERVICE","Values":["Amazon CloudFront"]}}' \
            --query 'ResultsByTime[0].Groups[0].Metrics.BlendedCost.Amount' \
            --output text 2>/dev/null || echo "0.00")

          echo "- **CloudFront**: \$${CLOUDFRONT_COST}" >> cost_report.md

          echo "" >> cost_report.md

      - name: Check resource utilization
        run: |
          echo "## 📊 Resource Utilization Analysis" >> cost_report.md
          echo "" >> cost_report.md

          # Lambda functions analysis
          echo "### ⚡ Lambda Functions" >> cost_report.md
          LAMBDA_FUNCTIONS=$(aws lambda list-functions --query 'Functions[*].{Name:FunctionName,Runtime:Runtime,Size:CodeSize,LastModified:LastModified}' --output table)
          if [ -n "$LAMBDA_FUNCTIONS" ]; then
            echo "```" >> cost_report.md
            echo "$LAMBDA_FUNCTIONS" >> cost_report.md
            echo "```" >> cost_report.md
          else
            echo "No Lambda functions found." >> cost_report.md
          fi
          echo "" >> cost_report.md

          # API Gateway APIs
          echo "### 🌐 API Gateway APIs" >> cost_report.md
          API_GATEWAYS=$(aws apigatewayv2 get-apis --query 'Items[*].{Name:Name,Protocol:ProtocolType,Created:CreatedDate}' --output table)
          if [ -n "$API_GATEWAYS" ]; then
            echo "```" >> cost_report.md
            echo "$API_GATEWAYS" >> cost_report.md
            echo "```" >> cost_report.md
          else
            echo "No API Gateways found." >> cost_report.md
          fi
          echo "" >> cost_report.md

          # S3 Buckets
          echo "### 🪣 S3 Buckets" >> cost_report.md
          S3_BUCKETS=$(aws s3api list-buckets --query 'Buckets[*].{Name:Name,Created:CreationDate}' --output table)
          if [ -n "$S3_BUCKETS" ]; then
            echo "```" >> cost_report.md
            echo "$S3_BUCKETS" >> cost_report.md
            echo "```" >> cost_report.md
          else
            echo "No S3 buckets found." >> cost_report.md
          fi
          echo "" >> cost_report.md

          # RDS Clusters
          echo "### 🗄️ RDS Aurora Serverless Clusters" >> cost_report.md
          RDS_CLUSTERS=$(aws rds describe-db-clusters --query 'DBClusters[*].{Name:DBClusterIdentifier,Engine:Engine,Status:Status}' --output table)
          if [ -n "$RDS_CLUSTERS" ]; then
            echo "```" >> cost_report.md
            echo "$RDS_CLUSTERS" >> cost_report.md
            echo "```" >> cost_report.md
          else
            echo "No RDS clusters found." >> cost_report.md
          fi
          echo "" >> cost_report.md

      - name: Generate optimization recommendations
        run: |
          echo "## 💡 Cost Optimization Recommendations" >> cost_report.md
          echo "" >> cost_report.md

          # Check for unused Lambda functions
          echo "### ⚡ Lambda Optimization" >> cost_report.md
          LAMBDA_COUNT=$(aws lambda list-functions --query 'length(Functions)' --output text)
          if [ "$LAMBDA_COUNT" -gt 10 ]; then
            echo "- Consider consolidating Lambda functions (currently: $LAMBDA_COUNT)" >> cost_report.md
          fi

          # Check Lambda memory settings
          HIGH_MEMORY_LAMBDAS=$(aws lambda list-functions --query 'Functions[?MemorySize > `512`].FunctionName' --output text)
          if [ -n "$HIGH_MEMORY_LAMBDAS" ]; then
            echo "- Review high-memory Lambda functions:" >> cost_report.md
            for func in $HIGH_MEMORY_LAMBDAS; do
              echo "  - $func" >> cost_report.md
            done
          fi

          # Check for old versions
          echo "- Remove old Lambda versions to reduce storage costs" >> cost_report.md
          echo "- Consider using Lambda Provisioned Concurrency only for critical functions" >> cost_report.md
          echo "" >> cost_report.md

          echo "### 🌐 API Gateway Optimization" >> cost_report.md
          echo "- Use caching for frequently accessed endpoints" >> cost_report.md
          echo "- Consider request/response compression" >> cost_report.md
          echo "- Monitor for unused API Gateway instances" >> cost_report.md
          echo "" >> cost_report.md

          echo "### 🪣 S3 Optimization" >> cost_report.md
          echo "- Implement lifecycle policies for log files and temporary data" >> cost_report.md
          echo "- Use S3 Intelligent Tiering for variable access patterns" >> cost_report.md
          echo "- Consider S3 Transfer Acceleration only if needed" >> cost_report.md
          echo "" >> cost_report.md

          echo "### 🗄️ RDS Aurora Optimization" >> cost_report.md
          echo "- Aurora Serverless v2 automatically scales - monitor actual usage" >> cost_report.md
          echo "- Review backup retention periods" >> cost_report.md
          echo "- Consider read replicas only for high-read workloads" >> cost_report.md
          echo "" >> cost_report.md

          echo "### 🌍 CloudFront Optimization" >> cost_report.md
          echo "- Use appropriate price class based on global requirements" >> cost_report.md
          echo "- Enable compression for text-based content" >> cost_report.md
          echo "- Monitor cache hit ratio and adjust TTL settings" >> cost_report.md
          echo "" >> cost_report.md

      - name: Cost alert check
        run: |
          echo "## 🚨 Cost Alerts" >> cost_report.md
          echo "" >> cost_report.md

          # Check if current costs exceed thresholds
          CURRENT_MONTH=$(date +%Y-%m-01)
          NEXT_MONTH=$(date -d "+1 month" +%Y-%m-01)

          TOTAL_COST=$(aws ce get-cost-and-usage \
            --time-period Start=$CURRENT_MONTH,End=$NEXT_MONTH \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)

          # Convert to integer for comparison (multiply by 100 to handle decimals)
          TOTAL_COST_CENTS=$(echo "$TOTAL_COST * 100" | bc | cut -d. -f1)
          WARNING_THRESHOLD_CENTS=5000  # $50.00
          CRITICAL_THRESHOLD_CENTS=10000 # $100.00

          if [ "$TOTAL_COST_CENTS" -gt "$CRITICAL_THRESHOLD_CENTS" ]; then
            echo "🔴 **CRITICAL**: Monthly costs (\$${TOTAL_COST}) exceed \$100 threshold!" >> cost_report.md
            echo "COST_ALERT=critical" >> $GITHUB_ENV
          elif [ "$TOTAL_COST_CENTS" -gt "$WARNING_THRESHOLD_CENTS" ]; then
            echo "🟡 **WARNING**: Monthly costs (\$${TOTAL_COST}) exceed \$50 threshold" >> cost_report.md
            echo "COST_ALERT=warning" >> $GITHUB_ENV
          else
            echo "✅ **OK**: Monthly costs (\$${TOTAL_COST}) are within acceptable limits" >> cost_report.md
            echo "COST_ALERT=ok" >> $GITHUB_ENV
          fi

          echo "" >> cost_report.md

      - name: Display cost report in job summary
        run: |
          echo "📊 Displaying cost report in job summary..."

          # Add the complete cost report to GitHub Actions job summary
          cat cost_report.md >> $GITHUB_STEP_SUMMARY

          echo "✅ Cost report displayed in job summary - check the Summary tab!"

      - name: Create or update cost monitoring issue
        if: env.COST_ALERT != 'ok'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const costReport = fs.readFileSync('cost_report.md', 'utf8');

            const alertLevel = process.env.COST_ALERT;
            const title = alertLevel === 'critical' 
              ? '🔴 CRITICAL: AWS Cost Alert - Monthly costs exceed $100'
              : '🟡 WARNING: AWS Cost Alert - Monthly costs exceed $50';

            // Check if there's an existing cost monitoring issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['cost-monitoring'],
              state: 'open'
            });

            const issueBody = `${costReport}

            ---
            *This issue was automatically generated by the cost monitoring workflow.*
            *Last updated: ${new Date().toISOString()}*`;

            if (issues.length > 0) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues[0].number,
                title: title,
                body: issueBody,
                labels: ['cost-monitoring', alertLevel === 'critical' ? 'priority-high' : 'priority-medium']
              });
              
              console.log(`Updated existing cost monitoring issue #${issues[0].number}`);
            } else {
              // Create new issue
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: issueBody,
                labels: ['cost-monitoring', alertLevel === 'critical' ? 'priority-high' : 'priority-medium']
              });
              
              console.log('Created new cost monitoring issue');
            }
