name: Emergency Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "prod"
        type: choice
        options:
          - dev
          - dev01
          - dev02
          - dev03
          - qa
          - qa01
          - qa02
          - qa03
          - staging
          - staging01
          - staging02
          - staging03
          - hotfix
          - hotfix01
          - hotfix02
          - hotfix03
          - prod
      reason:
        description: "Reason for emergency deployment"
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  DOMAIN: hibiji.com

jobs:
  emergency-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log emergency deployment
        run: |
          echo "ðŸš¨ EMERGENCY DEPLOYMENT INITIATED ðŸš¨"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Triggered by: ${{ github.actor }}"
          echo "Time: $(date)"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get ECR Registry URL
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        id: backend-build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dpp-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        id: frontend-build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: dpp-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          cd terraform/environments/main
          terraform init

      - name: Terraform Apply (Emergency)
        run: |
          # Determine environment and sub-environment
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          MAIN_ENV=$(echo $ENVIRONMENT | sed 's/[0-9]*$//')
          SUB_ENV="$ENVIRONMENT"

          echo "Emergency deploying to environment: $ENVIRONMENT"
          echo "Main environment: $MAIN_ENV"
          echo "Sub environment: $SUB_ENV"

          # Use main environment directory
          cd terraform/environments/$MAIN_ENV

          # Apply with sub-environment variable if it's a sub-environment
          if [[ "$ENVIRONMENT" =~ [0-9]+$ ]]; then
            echo "Emergency deploying to sub-environment: $SUB_ENV"
            terraform apply -auto-approve \
              -var="sub_environment=$SUB_ENV" \
              -var="ecr_repository_url=${{ steps.backend-build.outputs.image }}" \
              -var="frontend_ecr_repository_url=${{ steps.frontend-build.outputs.image }}" \
              -var="image_tag=${{ github.sha }}" \
              -var="frontend_image_tag=${{ github.sha }}"
          else
            echo "Emergency deploying to main environment: $ENVIRONMENT"
            terraform apply -auto-approve
          fi
        env:
          TF_VAR_environment: ${{ github.event.inputs.environment }}
          TF_VAR_ecr_repository_url: ${{ steps.backend-build.outputs.image }}
          TF_VAR_frontend_ecr_repository_url: ${{ steps.frontend-build.outputs.image }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_frontend_image_tag: ${{ github.sha }}

      - name: Update ECS services
        run: |
          aws ecs update-service \
            --cluster dpp-cluster \
            --service dpp-backend-service \
            --force-new-deployment

          aws ecs update-service \
            --cluster dpp-cluster \
            --service dpp-frontend-service \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster dpp-cluster \
            --services dpp-backend-service dpp-frontend-service

      - name: Emergency deployment complete
        run: |
          echo "âœ… Emergency deployment completed successfully"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Time: $(date)"
