name: Database Migration

on:
  push:
    branches: [main, dev01]
    paths:
      - "packages/database/src/schema.ts"
      - "apps/server/drizzle/**"
      - "apps/server/src/migrate.ts"
      - ".github/workflows/migrate-database.yml"
  pull_request:
    branches: [main]
    paths:
      - "packages/database/src/schema.ts"
      - "apps/server/drizzle/**"
      - "apps/server/src/migrate.ts"
      - ".github/workflows/migrate-database.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      dry_run:
        description: "Run migration check only (no changes)"
        required: true
        default: true
        type: boolean

jobs:
  migration-check:
    name: Validate Migration Safety
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd apps/server && npm ci
          cd ../.. && cd packages/database && npm ci

      - name: Debug commit information
        run: |
          echo "üîç Debug: Commit information"
          echo "Event: ${{ github.event_name }}"
          echo "Before: ${{ github.event.before }}"
          echo "After: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo ""
          echo "üìã Recent commits:"
          git log --oneline -n 5
          echo ""

      - name: Check for schema changes
        id: check-changes
        run: |
          echo "üîç Checking for schema changes in push..."

          # For push events, check all commits in the push
          if [ "${{ github.event_name }}" = "push" ]; then
            # Get the range of commits in this push
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # New branch - check last commit only
              COMMIT_RANGE="HEAD^ HEAD"
              echo "üìù New branch detected, checking last commit: $COMMIT_RANGE"
            else
              # Existing branch - check all commits in push
              COMMIT_RANGE="${{ github.event.before }}..HEAD"
              echo "üìù Checking commit range: $COMMIT_RANGE"
            fi
          else
            # For PR events, check the PR diff
            COMMIT_RANGE="${{ github.event.pull_request.base.sha }}..HEAD"
            echo "üìù PR detected, checking range: $COMMIT_RANGE"
          fi

          echo "üîé Commits in range:"
          git log --oneline $COMMIT_RANGE || echo "No commits in range"
          echo ""

          echo "üìÅ All files changed in range:"
          git diff --name-only $COMMIT_RANGE || echo "No files changed"
          echo ""

          # Check if any commits in the range modified schema files
          if git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" > /dev/null; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "üîÑ Database schema changes detected in commit range: $COMMIT_RANGE"
            echo "üìã Modified schema files:"
            git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" | sed 's/^/  - /'
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No database schema changes in commit range: $COMMIT_RANGE"
          fi

      - name: Generate migration files
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          npm run db:generate

      - name: Validate migration syntax
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          npm run migrate:check || true

      - name: Check migration safety
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          echo "üîç Checking migration files for safety..."

          # Check for potentially dangerous operations
          if grep -r "DROP TABLE\|DROP COLUMN\|ALTER COLUMN.*DROP" drizzle/ 2>/dev/null; then
            echo "‚ùå DANGEROUS: Migration contains destructive operations"
            echo "::error::Migration contains DROP operations that could cause data loss"
            exit 1
          fi

          if grep -r "NOT NULL" drizzle/ 2>/dev/null && ! grep -r "DEFAULT" drizzle/ 2>/dev/null; then
            echo "‚ö†Ô∏è  WARNING: Adding NOT NULL column without DEFAULT value"
            echo "::warning::Adding NOT NULL column without default may fail on existing data"
          fi

          echo "‚úÖ Migration safety check passed"

      - name: Upload migration artifacts
        if: steps.check-changes.outputs.has-changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: migration-files
          path: apps/server/drizzle/
          retention-days: 30

  migrate-dev:
    name: Apply Migration (Development)
    needs: migration-check
    if: needs.migration-check.outputs.has-changes == 'true' && (github.ref == 'refs/heads/dev01' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: development

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: digital_persona_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd apps/server && npm ci

      - name: Download migration files
        uses: actions/download-artifact@v4
        with:
          name: migration-files
          path: apps/server/drizzle/

      - name: Build migration runner
        run: |
          cd apps/server
          npm run build

      - name: Create test database backup
        run: |
          PGPASSWORD=postgres pg_dump -h localhost -U postgres -d digital_persona_test > backup.sql || true

      - name: Run migrations (dry run)
        if: inputs.dry_run == true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digital_persona_test
        run: |
          cd apps/server
          echo "üß™ DRY RUN: Migration check only"
          npm run migrate:check

      - name: Apply migrations
        if: inputs.dry_run != true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digital_persona_test
        run: |
          cd apps/server
          echo "üöÄ Applying migrations to development database..."
          npm run migrate:up

      - name: Verify migration success
        if: inputs.dry_run != true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digital_persona_test
        run: |
          cd apps/server
          echo "üîç Verifying migration results..."

          # Check that critical tables exist
          PGPASSWORD=postgres psql -h localhost -U postgres -d digital_persona_test -c "
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name;
          "

          # Verify date_of_birth column exists
          PGPASSWORD=postgres psql -h localhost -U postgres -d digital_persona_test -c "
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'users' AND column_name = 'date_of_birth';
          "

      - name: Rollback on failure
        if: failure() && inputs.dry_run != true
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/digital_persona_test
        run: |
          echo "‚ùå Migration failed, attempting rollback..."
          if [ -f backup.sql ]; then
            PGPASSWORD=postgres psql -h localhost -U postgres -d digital_persona_test < backup.sql
            echo "üîÑ Database restored from backup"
          else
            echo "‚ö†Ô∏è  No backup available for rollback"
          fi

  notify-success:
    name: Notify Migration Success
    needs: [migration-check, migrate-dev]
    if: success() && needs.migration-check.outputs.has-changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Notify success
        run: |
          echo "‚úÖ Database migration completed successfully"
          echo "üîí Data integrity maintained"
          echo "üìä All safety checks passed"

  notify-failure:
    name: Notify Migration Failure
    needs: [migration-check, migrate-dev]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Notify failure
        run: |
          echo "‚ùå Database migration failed"
          echo "üö® Manual intervention may be required"
          echo "üìã Check logs for details"
          echo "::error::Migration workflow failed - check migration safety"
