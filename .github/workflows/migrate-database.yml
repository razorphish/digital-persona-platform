name: Database Migration

on:
  push:
    branches: [main, dev01]
    paths:
      - "packages/database/src/schema.ts"
      - "apps/server/drizzle/**"
      - "apps/server/src/migrate.ts"
      - ".github/workflows/migrate-database.yml"
  pull_request:
    branches: [main]
    paths:
      - "packages/database/src/schema.ts"
      - "apps/server/drizzle/**"
      - "apps/server/src/migrate.ts"
      - ".github/workflows/migrate-database.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod
      dry_run:
        description: "Run migration check only (no changes)"
        required: true
        default: true
        type: boolean

jobs:
  migration-check:
    name: Validate Migration Safety
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.check-changes.outputs.has-changes }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Build workspace packages
        run: |
          echo "🔧 Building workspace dependencies for migration generation..."

          # Build database package first (needed for schema imports)
          echo "📦 Building @digital-persona/database..."
          cd packages/database
          npm run build
          cd ../..

          # Build shared package (needed for types)
          echo "📦 Building @digital-persona/shared..."
          cd packages/shared  
          npm run build
          cd ../..

          echo "✅ Workspace packages built for migration validation"

      - name: Debug commit information
        run: |
          echo "🔍 Debug: Commit information"
          echo "Event: ${{ github.event_name }}"
          echo "Before: ${{ github.event.before }}"
          echo "After: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo ""
          echo "📋 Recent commits:"
          git log --oneline -n 5
          echo ""

      - name: Check for schema changes
        id: check-changes
        run: |
          echo "🔍 Checking for schema changes..."

          # For workflow_dispatch events, always force migration
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "📝 Manual workflow dispatch detected"
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "🧪 Dry run requested - checking for schema changes"
            else
              echo "🚀 Force migration requested - applying all pending migrations"
            fi
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "✅ Forcing migration execution for manual dispatch"
          elif [ "${{ github.event_name }}" = "push" ]; then
            # For push events, check all commits in the push
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # New branch - check last commit only
              COMMIT_RANGE="HEAD^ HEAD"
              echo "📝 New branch detected, checking last commit: $COMMIT_RANGE"
            else
              # Existing branch - check all commits in push
              COMMIT_RANGE="${{ github.event.before }}..HEAD"
              echo "📝 Checking commit range: $COMMIT_RANGE"
            fi

            echo "🔎 Commits in range:"
            git log --oneline $COMMIT_RANGE || echo "No commits in range"
            echo ""

            echo "📁 All files changed in range:"
            git diff --name-only $COMMIT_RANGE || echo "No files changed"
            echo ""

            # Check if any commits in the range modified schema files
            if git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" > /dev/null; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "🔄 Database schema changes detected in commit range: $COMMIT_RANGE"
              echo "📋 Modified schema files:"
              git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" | sed 's/^/  - /'
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "✅ No database schema changes in commit range: $COMMIT_RANGE"
            fi
          else
            # For PR events, check the PR diff
            COMMIT_RANGE="${{ github.event.pull_request.base.sha }}..HEAD"
            echo "📝 PR detected, checking range: $COMMIT_RANGE"

            echo "🔎 Commits in range:"
            git log --oneline $COMMIT_RANGE || echo "No commits in range"
            echo ""

            echo "📁 All files changed in range:"
            git diff --name-only $COMMIT_RANGE || echo "No files changed"
            echo ""

            # Check if any commits in the range modified schema files
            if git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" > /dev/null; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "🔄 Database schema changes detected in commit range: $COMMIT_RANGE"
              echo "📋 Modified schema files:"
              git diff --name-only $COMMIT_RANGE | grep -E "(schema\.ts|drizzle/)" | sed 's/^/  - /'
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "✅ No database schema changes in commit range: $COMMIT_RANGE"
            fi
          fi

      - name: Generate migration files
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          npm run db:generate

      - name: Validate migration syntax
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          npm run migrate:check || true

      - name: Check migration safety
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          cd apps/server
          echo "🔍 Checking migration files for safety..."

          # Check for potentially dangerous operations
          if grep -r "DROP TABLE\|DROP COLUMN\|ALTER COLUMN.*DROP" drizzle/ 2>/dev/null; then
            echo "❌ DANGEROUS: Migration contains destructive operations"
            echo "::error::Migration contains DROP operations that could cause data loss"
            exit 1
          fi

          if grep -r "NOT NULL" drizzle/ 2>/dev/null && ! grep -r "DEFAULT" drizzle/ 2>/dev/null; then
            echo "⚠️  WARNING: Adding NOT NULL column without DEFAULT value"
            echo "::warning::Adding NOT NULL column without default may fail on existing data"
          fi

          echo "✅ Migration safety check passed"

      - name: Upload migration artifacts
        if: steps.check-changes.outputs.has-changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: migration-files
          path: apps/server/drizzle/
          retention-days: 30

  migrate-dev:
    name: Apply Migration (Development)
    needs: migration-check
    if: needs.migration-check.outputs.has-changes == 'true' && (github.ref == 'refs/heads/dev01' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    environment: development

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Build workspace packages
        run: |
          echo "🔧 Building workspace dependencies in correct order..."

          # Build database package first (needed by server)
          echo "📦 Building @digital-persona/database..."
          cd packages/database
          npm run build
          cd ../..

          # Build shared package (needed by server)
          echo "📦 Building @digital-persona/shared..."
          cd packages/shared
          npm run build
          cd ../..

          echo "✅ Workspace packages built successfully"

      - name: Verify workspace build outputs
        run: |
          echo "🔍 Verifying workspace package build outputs..."

          # Check database package build output
          if [ -f "packages/database/dist/index.js" ] && [ -f "packages/database/dist/index.d.ts" ]; then
            echo "✅ @digital-persona/database build output verified"
            ls -la packages/database/dist/
          else
            echo "❌ @digital-persona/database build output missing"
            ls -la packages/database/ || echo "packages/database directory not found"
            exit 1
          fi

          # Check shared package build output  
          if [ -f "packages/shared/dist/index.js" ] && [ -f "packages/shared/dist/index.d.ts" ]; then
            echo "✅ @digital-persona/shared build output verified"
            ls -la packages/shared/dist/
          else
            echo "❌ @digital-persona/shared build output missing"
            ls -la packages/shared/ || echo "packages/shared directory not found"
            exit 1
          fi

          echo "🎉 All workspace package outputs verified successfully"

      - name: Download migration files
        uses: actions/download-artifact@v4
        with:
          name: migration-files
          path: apps/server/drizzle/

      - name: Build migration runner
        run: |
          echo "🏗️ Building server with dependencies..."
          cd apps/server
          npm run build
          echo "✅ Migration runner built successfully"

      - name: Get Aurora database credentials
        id: get-db-creds
        run: |
          echo "🔐 Retrieving Aurora database credentials from AWS Secrets Manager..."
          
          # Get database password from secrets manager
          DB_SECRET=$(aws secretsmanager get-secret-value \
            --secret-id dev-dev01-dpp-database-password \
            --region us-west-1 \
            --query SecretString --output text)
          
          DB_PASSWORD=$(echo $DB_SECRET | jq -r '.password')
          DB_USERNAME=$(echo $DB_SECRET | jq -r '.username')
          
          # URL encode the password to handle special characters
          DB_PASSWORD_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$DB_PASSWORD', safe=''))")
          
          # Construct database URL for Aurora via RDS Proxy with encoded password
          DATABASE_URL="postgresql://${DB_USERNAME}:${DB_PASSWORD_ENCODED}@dev-dev01-dpp-rds-proxy.proxy-cr6q082uklxj.us-west-1.rds.amazonaws.com:5432/digital_persona"
          
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "✅ Database credentials retrieved and URL encoded successfully"

      - name: Run migrations (dry run)
        if: inputs.dry_run == true
        env:
          DATABASE_URL: ${{ steps.get-db-creds.outputs.DATABASE_URL }}
        run: |
          cd apps/server
          echo "🧪 DRY RUN: Migration check only"
          npm run migrate:check

      - name: Apply migrations to Aurora
        if: inputs.dry_run != true
        env:
          DATABASE_URL: ${{ steps.get-db-creds.outputs.DATABASE_URL }}
        run: |
          cd apps/server
          echo "🚀 Applying migrations to Aurora database via RDS Proxy..."
          echo "📊 Target: dev-dev01-dpp-rds-proxy.proxy-cr6q082uklxj.us-west-1.rds.amazonaws.com"
          node dist/migrate.js up

      - name: Verify migration success
        if: inputs.dry_run != true
        env:
          DATABASE_URL: ${{ steps.get-db-creds.outputs.DATABASE_URL }}
        run: |
          cd apps/server
          echo "🔍 Verifying migration results on Aurora database..."

          # Use the node migration script to verify tables
          node -e "
            import postgres from 'postgres';
            const sql = postgres(process.env.DATABASE_URL);
            
            async function verify() {
              try {
                // Check that critical tables exist
                const tables = await sql\`
                  SELECT table_name 
                  FROM information_schema.tables 
                  WHERE table_schema = 'public' 
                  ORDER BY table_name
                \`;
                
                console.log('📋 Database tables:', tables.map(t => t.table_name).join(', '));
                
                // Verify users table exists and has expected columns
                const userColumns = await sql\`
                  SELECT column_name, data_type, is_nullable 
                  FROM information_schema.columns 
                  WHERE table_name = 'users' 
                  ORDER BY column_name
                \`;
                
                console.log('👤 Users table columns:', userColumns.length);
                const hasEmail = userColumns.some(col => col.column_name === 'email');
                const hasPasswordHash = userColumns.some(col => col.column_name === 'password_hash');
                
                if (hasEmail && hasPasswordHash) {
                  console.log('✅ Users table verified with required authentication columns');
                } else {
                  console.error('❌ Users table missing critical columns');
                  process.exit(1);
                }
                
                await sql.end();
                console.log('🎉 Migration verification completed successfully!');
              } catch (error) {
                console.error('❌ Verification failed:', error);
                process.exit(1);
              }
            }
            
            verify();
          "

  notify-success:
    name: Notify Migration Success
    needs: [migration-check, migrate-dev]
    if: success() && needs.migration-check.outputs.has-changes == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Notify success
        run: |
          echo "✅ Database migration completed successfully"
          echo "🔒 Data integrity maintained"
          echo "📊 All safety checks passed"

  notify-failure:
    name: Notify Migration Failure
    needs: [migration-check, migrate-dev]
    if: failure()
    runs-on: ubuntu-latest

    steps:
      - name: Notify failure
        run: |
          echo "❌ Database migration failed"
          echo "🚨 Manual intervention may be required"
          echo "📋 Check logs for details"
          echo "::error::Migration workflow failed - check migration safety"
