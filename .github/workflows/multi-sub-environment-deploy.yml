name: Multi-Sub-Environment Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Sub-environment to deploy to"
        required: true
        default: "dev01"
        type: choice
        options:
          - dev01
          - dev02
          - dev03
          - qa01
          - qa02
          - qa03
          - staging01
          - staging02
          - staging03
          - prod01
          - prod02

env:
  AWS_REGION: us-west-1
  DOMAIN: hibiji.com

jobs:
  deploy-sub-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Deploy to sub-environment
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')
          echo "Deploying to $SUB_ENV (parent: $MAIN_ENV)"
          cd terraform/environments/$MAIN_ENV
          terraform workspace select $SUB_ENV || terraform workspace new $SUB_ENV
          terraform init
          terraform plan -out=tfplan -var="sub_environment=$SUB_ENV"
          terraform apply -auto-approve tfplan

      - name: Run environment-specific tests
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          DOMAIN="$SUB_ENV.${{ env.DOMAIN }}"
          # Health checks
          curl -f https://$DOMAIN/health
          curl -f https://$DOMAIN/api/health
          # Environment-specific tests (if available)
          if [ -f frontend/package.json ]; then
            cd frontend
            npm install
            npm run test:environment -- --baseUrl=https://$DOMAIN || echo "No environment-specific tests"
          fi

      - name: Monitor deployment costs
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')
          # Check cost budget for sub-environment
          BUDGET=$(case $MAIN_ENV in
            "dev") echo 20 ;;
            "qa") echo 50 ;;
            "staging") echo 100 ;;
            "prod") echo 500 ;;
          esac)
          COST=$(aws ce get-cost-and-usage \
            --time-period Start=$(date -d '1 day ago' +%Y-%m-%d),End=$(date +%Y-%m-%d) \
            --granularity DAILY \
            --metrics BlendedCost \
            --filter '{"Tags":{"Key":"Environment","Values":["'$SUB_ENV'"]}}' \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)
          if (( $(echo "$COST > $BUDGET" | bc -l) )); then
            echo "Cost $COST exceeds budget $BUDGET for $SUB_ENV"
            exit 1
          fi
