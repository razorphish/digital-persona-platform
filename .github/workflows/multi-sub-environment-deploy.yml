name: Multi-Sub-Environment Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Sub-environment to deploy to"
        required: true
        default: "dev01"
        type: choice
        options:
          - dev01
          - dev02
          - dev03
          - qa01
          - qa02
          - qa03
          - staging01
          - staging02
          - staging03
          - prod01
          - prod02

env:
  AWS_REGION: us-west-1
  DOMAIN: hibiji.com

jobs:
  deploy-sub-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to sub-environment
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')
          echo "Deploying to $SUB_ENV (parent: $MAIN_ENV)"

          # Construct ECR repository URLs
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          BACKEND_ECR_URL="$ECR_REGISTRY/hibiji-backend"
          FRONTEND_ECR_URL="$ECR_REGISTRY/hibiji-frontend"

          # Use the main environment directory (workspace approach is problematic)
          cd terraform/environments/$MAIN_ENV
          terraform init

          # Use the default workspace but override the sub_environment variable
          terraform plan -out=tfplan \
            -var="sub_environment=$SUB_ENV" \
            -var="ecr_repository_url=$BACKEND_ECR_URL" \
            -var="frontend_ecr_repository_url=$FRONTEND_ECR_URL" \
            -var="image_tag=latest" \
            -var="frontend_image_tag=latest"
          terraform apply -auto-approve tfplan

          # Get the ALB DNS name for debugging
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          echo "ALB DNS Name: $ALB_DNS"

      - name: Wait for DNS and Service Availability
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          DOMAIN="$SUB_ENV.${{ env.DOMAIN }}"

          echo "Waiting for DNS propagation and service startup..."
          echo "Checking domain: $DOMAIN"

          # Wait for DNS propagation and service availability
          for i in {1..15}; do
            echo "Attempt $i/15: Checking if service is available..."
            
            # Try DNS resolution first
            if nslookup $DOMAIN >/dev/null 2>&1; then
              echo "✅ DNS resolution successful for $DOMAIN"
              
              # Try health check
              if curl -fs --max-time 10 https://$DOMAIN/health >/dev/null 2>&1; then
                echo "✅ Health endpoint available at https://$DOMAIN/health"
                break
              else
                echo "⚠️ DNS resolved but health endpoint not ready yet..."
              fi
            else
              echo "⏳ DNS not yet propagated for $DOMAIN..."
            fi
            
            if [ $i -eq 15 ]; then
              echo "❌ Service did not become available within timeout"
              echo "Debugging information:"
              echo "Domain: $DOMAIN"
              nslookup $DOMAIN || echo "DNS lookup failed"
              curl -v --max-time 5 https://$DOMAIN/health || echo "Health check failed"
              exit 1
            fi
            
            echo "Waiting 30 seconds before next attempt..."
            sleep 30
          done

      - name: Debug DNS resolution
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          DOMAIN="$SUB_ENV.${{ env.DOMAIN }}"
          echo "Debugging DNS resolution for: $DOMAIN"
          nslookup $DOMAIN || echo "nslookup failed"
          dig $DOMAIN +short || echo "dig failed"
          echo "Trying direct ALB access if available..."
          # Try direct ALB access as fallback
          cd terraform/environments/$(echo $SUB_ENV | sed 's/[0-9]*$//')
          ALB_DNS=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
          if [ ! -z "$ALB_DNS" ]; then
            echo "ALB DNS: $ALB_DNS"
            curl -fs --max-time 10 http://$ALB_DNS/health || echo "Direct ALB access failed"
          fi

      - name: Run environment-specific tests
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          DOMAIN="$SUB_ENV.${{ env.DOMAIN }}"

          echo "Running health checks for $DOMAIN"

          # Health checks with better error handling
          echo "Testing backend health endpoint..."
          curl -f --max-time 30 https://$DOMAIN/health || {
            echo "Backend health check failed, trying HTTP..."
            curl -f --max-time 30 http://$DOMAIN/health || echo "Backend health check failed"
          }

          echo "Testing API health endpoint..."
          curl -f --max-time 30 https://$DOMAIN/api/health || {
            echo "API health check failed, trying HTTP..."
            curl -f --max-time 30 http://$DOMAIN/api/health || echo "API health check failed"
          }

          # Environment-specific tests (if available)
          if [ -f frontend/package.json ]; then
            echo "Running frontend tests..."
            cd frontend
            npm install
            npm run test:environment -- --baseUrl=https://$DOMAIN || echo "No environment-specific tests or tests failed"
          else
            echo "No frontend package.json found, skipping frontend tests"
          fi

      - name: Monitor deployment costs
        run: |
          SUB_ENV="${{ github.event.inputs.environment }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')
          # Check cost budget for sub-environment
          BUDGET=$(case $MAIN_ENV in
            "dev") echo 20 ;;
            "qa") echo 50 ;;
            "staging") echo 100 ;;
            "prod") echo 500 ;;
          esac)
          COST=$(aws ce get-cost-and-usage \
            --time-period Start=$(date -d '1 day ago' +%Y-%m-%d),End=$(date +%Y-%m-%d) \
            --granularity DAILY \
            --metrics BlendedCost \
            --filter '{"Tags":{"Key":"Environment","Values":["'$SUB_ENV'"]}}' \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)
          if (( $(echo "$COST > $BUDGET" | bc -l) )); then
            echo "Cost $COST exceeds budget $BUDGET for $SUB_ENV"
            exit 1
          fi
