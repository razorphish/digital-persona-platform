name: Multi-Sub-Environment Deployment

on:
  push:
    branches: [dev, qa, staging, prod]
  pull_request:
    branches: [dev, qa, staging, prod]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev01"
        type: choice
        options:
          - dev01
          - dev02
          - dev03
          - qa01
          - qa02
          - qa03
          - staging01
          - staging02
          - staging03
          - prod01
          - prod02

env:
  AWS_REGION: us-west-1
  DOMAIN: hibiji.com

jobs:
  # Dynamic sub-environment deployment
  deploy-sub-environment:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Dynamic matrix based on branch and sub-environments
        include:
          - branch: dev
            sub_envs: [dev01, dev02, dev03]
          - branch: qa
            sub_envs: [qa01, qa02, qa03]
          - branch: staging
            sub_envs: [staging01, staging02, staging03]
          - branch: prod
            sub_envs: [prod01, prod02]

    if: github.ref == 'refs/heads/${{ matrix.branch }}' || github.event.inputs.environment == '${{ matrix.sub_envs }}'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to sub-environment
        run: |
          SUB_ENV="${{ matrix.sub_envs }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')

          echo "Deploying to $SUB_ENV (parent: $MAIN_ENV)"

          cd terraform/environments/$MAIN_ENV
          terraform workspace select $SUB_ENV || terraform workspace new $SUB_ENV
          terraform init
          terraform plan -out=tfplan -var="sub_environment=$SUB_ENV"
          terraform apply tfplan

      - name: Run environment-specific tests
        run: |
          SUB_ENV="${{ matrix.sub_envs }}"
          DOMAIN="$SUB_ENV.${{ env.DOMAIN }}"

          # Health checks
          curl -f https://$DOMAIN/health
          curl -f https://$DOMAIN/api/health

          # Environment-specific tests
          npm run test:environment -- --baseUrl=https://$DOMAIN

      - name: Monitor deployment costs
        run: |
          SUB_ENV="${{ matrix.sub_envs }}"
          MAIN_ENV=$(echo $SUB_ENV | sed 's/[0-9]*$//')

          # Check cost budget for sub-environment
          BUDGET=$(case $MAIN_ENV in
            "dev") echo 20 ;;
            "qa") echo 50 ;;
            "staging") echo 100 ;;
            "prod") echo 500 ;;
          esac)

          COST=$(aws ce get-cost-and-usage \
            --time-period Start=$(date -d '1 day ago' +%Y-%m-%d),End=$(date +%Y-%m-%d) \
            --granularity DAILY \
            --metrics BlendedCost \
            --filter '{"Tags":{"Key":"Environment","Values":["'$SUB_ENV'"]}}' \
            --query 'ResultsByTime[0].Total.BlendedCost.Amount' \
            --output text)

          if (( $(echo "$COST > $BUDGET" | bc -l) )); then
            echo "Cost $COST exceeds budget $BUDGET for $SUB_ENV"
            exit 1
          fi

  # Wildcard sub-environment creation
  create-wildcard-environment:
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'wildcard'
    steps:
      - name: Create new sub-environment
        run: |
          # Determine next available sub-environment number
          MAIN_ENV=${{ github.event.inputs.main_environment }}

          # Find next available number
          NEXT_NUM=$(aws ec2 describe-instances \
            --filters "Name=tag:Environment,Values=$MAIN_ENV*" \
            --query 'Reservations[*].Instances[*].Tags[?Key==`SubEnvironment`].Value' \
            --output text | tr ' ' '\n' | grep "^$MAIN_ENV" | sed 's/[^0-9]//g' | sort -n | tail -1)

          NEXT_NUM=$((NEXT_NUM + 1))
          NEW_SUB_ENV="${MAIN_ENV}${NEXT_NUM:02d}"

          echo "Creating new sub-environment: $NEW_SUB_ENV"

          # Create new workspace and deploy
          cd terraform/environments/$MAIN_ENV
          terraform workspace new $NEW_SUB_ENV
          terraform init
          terraform plan -out=tfplan -var="sub_environment=$NEW_SUB_ENV"
          terraform apply tfplan
