name: Deploy with IAM Role

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          cd terraform/environments/main
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform/environments/main
          terraform plan -out=tfplan
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform/environments/main
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_environment: prod

      - name: Build and push Docker images
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Build backend image
          docker build -t dpp-backend:${{ github.sha }} .
          docker tag dpp-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/dpp-backend:${{ github.sha }}
          docker tag dpp-backend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/dpp-backend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/dpp-backend:${{ github.sha }}
          docker push ${{ secrets.ECR_REGISTRY }}/dpp-backend:latest

          # Build frontend image
          cd frontend
          docker build -t dpp-frontend:${{ github.sha }} .
          docker tag dpp-frontend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/dpp-frontend:${{ github.sha }}
          docker tag dpp-frontend:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/dpp-frontend:latest
          docker push ${{ secrets.ECR_REGISTRY }}/dpp-frontend:${{ github.sha }}
          docker push ${{ secrets.ECR_REGISTRY }}/dpp-frontend:latest

      - name: Update ECS services
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Update backend service
          aws ecs update-service \
            --cluster dpp-cluster \
            --service dpp-backend-service \
            --force-new-deployment

          # Update frontend service
          aws ecs update-service \
            --cluster dpp-cluster \
            --service dpp-frontend-service \
            --force-new-deployment

      - name: Wait for deployment
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Wait for backend service to stabilize
          aws ecs wait services-stable \
            --cluster dpp-cluster \
            --services dpp-backend-service

          # Wait for frontend service to stabilize
          aws ecs wait services-stable \
            --cluster dpp-cluster \
            --services dpp-frontend-service

      - name: Run tests
        run: |
          # Run backend tests
          python -m pytest tests/ -v

          # Run frontend tests (if applicable)
          cd frontend
          npm test -- --watchAll=false

  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run security scan
        run: |
          # Scan for secrets in code
          git secrets --scan-history

          # Scan for vulnerabilities in dependencies
          pip-audit
          npm audit --audit-level moderate

      - name: Check IAM permissions
        run: |
          # Verify current user permissions
          aws sts get-caller-identity
          aws iam get-user
