name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - qa
          - staging
          - prod
      sub_environment:
        description: "Sub-environment to deploy"
        required: true
        default: "main"
        type: choice
        options:
          - main
          - qa
          - staging
      action:
        description: "Terraform action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: "1.8.5"
  AWS_REGION: "us-west-1"

jobs:
  terraform:
    name: "Terraform ${{ inputs.action }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR repository URLs
        id: ecr-urls
        run: |
          # Get ECR repository URLs
          BACKEND_REPO=$(aws ecr describe-repositories --query "repositories[?repositoryName=='hibiji-backend'].repositoryUri" --output text)
          FRONTEND_REPO=$(aws ecr describe-repositories --query "repositories[?repositoryName=='hibiji-frontend'].repositoryUri" --output text)

          # Validate repositories exist
          if [ -z "$BACKEND_REPO" ]; then
            echo "❌ Error: Could not find hibiji-backend ECR repository"
            exit 1
          fi

          if [ -z "$FRONTEND_REPO" ]; then
            echo "❌ Error: Could not find hibiji-frontend ECR repository"
            exit 1
          fi

          echo "✅ Backend ECR: $BACKEND_REPO"
          echo "✅ Frontend ECR: $FRONTEND_REPO"

          # Set outputs for next steps
          echo "backend_repo=$BACKEND_REPO" >> $GITHUB_OUTPUT
          echo "frontend_repo=$FRONTEND_REPO" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        run: terraform init

      - name: Terraform Format Check
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        run: terraform validate

      - name: Terraform Plan
        if: inputs.action == 'plan'
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        env:
          TF_VAR_ecr_repository_url: ${{ steps.ecr-urls.outputs.backend_repo }}
          TF_VAR_frontend_ecr_repository_url: ${{ steps.ecr-urls.outputs.frontend_repo }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_frontend_image_tag: ${{ github.sha }}
        run: terraform plan

      - name: Terraform Apply
        if: inputs.action == 'apply'
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        env:
          TF_VAR_ecr_repository_url: ${{ steps.ecr-urls.outputs.backend_repo }}
          TF_VAR_frontend_ecr_repository_url: ${{ steps.ecr-urls.outputs.frontend_repo }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_frontend_image_tag: ${{ github.sha }}
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        env:
          TF_VAR_ecr_repository_url: ${{ steps.ecr-urls.outputs.backend_repo }}
          TF_VAR_frontend_ecr_repository_url: ${{ steps.ecr-urls.outputs.frontend_repo }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_frontend_image_tag: ${{ github.sha }}
        run: terraform destroy -auto-approve

      - name: Get Terraform Outputs
        if: inputs.action == 'apply'
        working-directory: terraform/environments/${{ inputs.sub_environment }}
        run: |
          echo "## Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          terraform output >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
